[
    "//import {\n    IAliasParams,\n    IAliasTransaction,\n    IBurnParams,\n    IBurnTransaction,\n    ICancelLeaseParams,\n    ICancelLeaseTransaction,\n    ICancelOrder,\n    ICancelOrderParams,\n    IDataParams,\n    IDataTransaction,\n    IInvokeScriptParams,\n    IInvokeScriptTransaction,\n    IIssueParams,\n    IIssueTransaction,\n    ILeaseParams,\n    ILeaseTransaction,\n    IMassTransferItem,\n    IMassTransferParams,\n    IMassTransferTransaction,\n    IOrderParams,\n    IReissueParams,\n    IReissueTransaction,\n    ISetAssetScriptParams,\n    ISetAssetScriptTransaction,\n    ISetScriptParams,\n    ISetScriptTransaction,\n    ISponsorshipParams,\n    ISponsorshipTransaction,\n    ITransferParams,\n    ITransferTransaction,\n    TOrder,\n    TSeedTypes,\n    TTx,\n    TTxParams,\n    WithId,\n    WithTxType,\n    INodeRequestOptions,\n    IDataEntry\n} from '@waves/waves-transactions';\n\n/**\n * Contains seeds generated by setupAccounts function\n * E.g:\n * ```ts\n * await setupAccounts({foo:10, bar: 20})\n * console.log(accounts.foo, accounts.bar) // these variables now contain seeds from accounts with 10 and 20 wavelets\n * ```\n */\n const accounts: Record<string, string>;\n\n\n/// TRANSACTION CREATORS\n/**\n * Creates alias transaction or signs already formed one. Creates alias for address.\n * Alias could be used in place of address later\n */\n function alias(params: IAliasParams, seed?: TSeedTypes): IAliasTransaction & WithId\n\n/**\n * Creates burn transaction or signs already formed one. Burn transaction destroys tokens. You cannot burn WAVES\n */\n function burn(params: IBurnParams, seed?: TSeedTypes): IBurnTransaction & WithId\n\n/**\n * Creates cancel-lease transaction or signs already formed one\n */\n function cancelLease(params: ICancelLeaseParams, seed?: TSeedTypes): ICancelLeaseTransaction & WithId\n\n/**\n * Creates cancel-order request or signs already formed one\n */\n function cancelOrder(params: ICancelOrderParams, seed?: TSeedTypes): ICancelOrder\n\n/**\n * Creates data transaction or signs already formed one\n */\n function data(params: IDataParams, seed?: TSeedTypes): IDataTransaction & WithId\n\n/**\n * Creates issue transaction or signs already formed one\n */\n function issue(params: IIssueParams, seed?: TSeedTypes): IIssueTransaction & WithId\n\n/**\n * Creates reissue transaction or signs already formed one\n */\n function reissue(params: IReissueParams, seed?: TSeedTypes): IReissueTransaction & WithId\n\n/**\n * Creates lease transaction or signs already formed one\n */\n function lease(params: ILeaseParams, seed?: TSeedTypes): ILeaseTransaction & WithId\n\n/**\n * Creates mass-transfer transaction or signs already formed one\n */\n function massTransfer(params: IMassTransferParams, seed?: TSeedTypes): IMassTransferTransaction & WithId\n\n/**\n * Creates order or signs already formed one\n */\n function order(params: IOrderParams, seed?: TSeedTypes): TOrder & WithId\n\n/**\n * Creates transfer transaction or signs already formed one\n */\n function transfer(params: ITransferParams, seed?: TSeedTypes): ITransferTransaction & WithId\n\n/**\n * Creates set-script transaction or signs already formed one\n */\n function setScript(params: ISetScriptParams, seed?: TSeedTypes): ISetScriptTransaction & WithId\n\n/**\n * Creates set-asset-script transaction or signs already formed one\n */\n function setAssetScript(params: ISetAssetScriptParams, seed?: TSeedTypes): ISetAssetScriptTransaction & WithId\n\n/**\n * Creates invoke-script transaction or signs already formed one\n */\n function invokeScript(params: IInvokeScriptParams, seed?: TSeedTypes): IInvokeScriptTransaction & WithId\n\n/**\n * Creates sponsorship transaction or signs already formed one\n */\n function sponsorship(params: ISponsorshipParams, seed?: TSeedTypes): ISponsorshipTransaction & WithId\n\n/**\n * Signs arbitrary transaction\n */\n function signTx(params: TTx | (TTxParams & WithTxType), seed?: TSeedTypes): TTx\n\n\n/// NODE INTERACTION\n/**\n * Resolves when specified txId is mined into the block\n * By default has 20s timeout and uses current environment node\n */\n function waitForTx(txId: string, options?: INodeRequestOptions): Promise<TTx>\n\n/**\n * Resolves N blocks after specified txId is mined into the block\n * By default has 20s timeout and uses current environment node\n */\n function waitForTxWithNConfirmations(txId: string, confirmations: number, options?: INodeRequestOptions): Promise<TTx>\n\n/**\n * Resolves N blocks after current blockchain height\n * By default has 20s timeout and uses current environment node\n */\n function waitNBlocks(blocksCount: number, options?: INodeRequestOptions): Promise<void>\n\n/**\n * Current blockchain height\n * By default has 20s timeout and uses current environment node\n */\n function currentHeight(apiBase?: string): Promise<number>\n\n/**\n * Resolves after target height has been reached\n * By default has 20s timeout and uses current environment node\n */\n function waitForHeight(target: number, options?: INodeRequestOptions): Promise<void>\n\n/**\n * Get account effective balance\n * By default uses current environment address and node\n */\n function balance(address?: string, apiBase?: string): Promise<number>\n\n/**\n * Retrieve information about specific asset account balance\n * By default uses current environment address and node\n */\n function assetBalance(assetId: string, address?: string, apiBase?: string): Promise<any>\n\n/**\n * Retrieve full information about waves account balance. Effective, generating etc\n * By default uses current environment address and node\n */\n function balanceDetails(address?: string, apiBase?: string): Promise<any>\n\n/**\n * Get full account dictionary\n * By default uses current environment address and node\n */\n function accountData(address?: string, apiBase?: string): Promise<Record<string, IDataEntry>>\n\n/**\n * Get data from account dictionary by key\n * By default uses current environment address and node\n */\n function accountDataByKey(key: string, address?: string, apiBase?: string): Promise<IDataEntry>\n\n/**\n * Get invokeScript tx state changes\n * By default uses current environment address and node\n */\n function stateChanges(invokeScriptTxId: string, apiBase?: string): Promise<any>\n\n/**\n * Sends transaction to waves node\n * By default uses current environment address and node\n */\n function broadcast(tx: TTx, apiBase?: string): Promise<any>\n\n\n// UTILITY\n/**\n * Returns file content as string. Either from 'ride' folder or WEB IDE storage\n */\n function file(name?: string): string\n\n/**\n * Shorthand for file()\n */\n function contract(): Promise<string>\n\n/**\n * Generates key pair from seed\n * By default uses current environment seed\n */\n function keyPair(seed?: string): { publicKey: string, privateKey: string }\n\n/**\n * Generates public key from seed\n * By default uses current environment seed\n */\n function publicKey(seed?: string): string\n\n/**\n * Generates private key from seed\n * By default uses current environment seed\n */\n function privateKey(seed?: string): string\n\n/**\n * Generates address\n * By default uses current environment seed and chainId\n */\n function address(seed?: string, chainId?: string): string\n\n/**\n * Returns base64 representations of compiled ride file\n */\n function compile(code: string): string\n\n/**\n * Signs arbitrary bytes\n * By default uses current environment seed and chainId\n */\n function signBytes(bytes: Uint8Array, seed?: string): string\n\n\n interface ISetupAccountsOptions {\n    /**\n     * Generated accounts have seed like 'name#' + nonce. E.g.: foo#ff4682. By default nonce is chosen randomly\n     * you can set nonce to have consistent seeds between tests\n     */\n    nonce?: string,\n    /**\n     * Seed phrase for account, from which waves will be transferred to generated accounts.\n     * If not set current account will be used\n     */\n    masterSeed?: string,\n}\n\n/**\n * Generates test accounts with balances. Sends waves to generated accounts from master seed. Saves account seeds `accounts`\n * E.g.: setupAccounts({foo:1000}). Now accounts['foo'] contains seed phrase for account and this account has\n * 1000 wavelets\n * By default uses current environment node and seed as masterSeed\n */\n function setupAccounts(balances: Record<string, number>, options?: ISetupAccountsOptions): Promise<Record<string, string>>\n\n/**\n * Shorthand for `chai.//` [[chai]]\n */\n function //(target: any, message?: string): any\n\n/**\n * Waves-crypto library https://www.npmjs.com/package/@waves/waves-crypto\n * Available in global scope:\n * ```js\n * const addressBytes = crypto.base58Decode('3N77yhDrPTdLFjzNPZcBQPZLDg11EHAB7xF')\n * ```\n */\n module wavesCrypto {\n\n}\n\n\n/**\n * Chai assertion library https://www.chaijs.com/\n * with chaiAsPromised plugin https://www.chaijs.com/plugins/chai-as-promised/\n *  * Available in global scope:\n * ```js\n * chai.//(2 === 3).to.be.false\n * ```\n * You can always use shorthand for [[//]]\n */\n module chai {\n\n}\n",
    "/**\n * @module index\n */\n//import { TypelessDataEntry } from './transactions/data';\n declare enum TRANSACTION_TYPE {\n    GENESIS = 1,\n    PAYMENT = 2,\n    ISSUE = 3,\n    TRANSFER = 4,\n    REISSUE = 5,\n    BURN = 6,\n    EXCHANGE = 7,\n    LEASE = 8,\n    CANCEL_LEASE = 9,\n    ALIAS = 10,\n    MASS_TRANSFER = 11,\n    DATA = 12,\n    SET_SCRIPT = 13,\n    SPONSORSHIP = 14,\n    SET_ASSET_SCRIPT = 15,\n    INVOKE_SCRIPT = 16\n}\n \n interface WithSender {\n    /**\n     * Account public key. This account will pay fee and this account's script will be executed if exists\n     */\n    senderPublicKey: string;\n}\n interface WithProofs {\n    /**\n     * ITransaction signatures\n     * @minItems 0\n     * @maxItems 8\n     */\n    proofs: string[];\n}\n interface WithChainId {\n    /**\n     * Network byte.\n     * E.g.,\n     * 87 is used for Waves mainnet, 84 for Waves testnet\n     */\n    chainId: number;\n}\n interface WithId {\n    /**\n     * Transaction ID. 32 bytes hash encoded as base58 string\n     */\n    id: string;\n}\n/**\n * This interface has common fields for all transactions\n * @typeparam LONG Generic type representing LONG type. Default to string | number\n */\n interface ITransaction<LONG = string | number> extends WithProofs, WithSender {\n    type: number;\n    timestamp: number;\n    fee: LONG;\n    version: number;\n}\n/**\n *\n */\n declare type TTx<LONG = string | number> = IAliasTransaction<LONG> | IIssueTransaction<LONG> | ITransferTransaction<LONG> | IReissueTransaction<LONG> | IBurnTransaction<LONG> | ILeaseTransaction<LONG> | IExchangeTransaction | ICancelLeaseTransaction<LONG> | IMassTransferTransaction<LONG> | ISetScriptTransaction<LONG> | ISponsorshipTransaction<LONG> | IDataTransaction<LONG> | ISetAssetScriptTransaction<LONG> | IInvokeScriptTransaction<LONG>;\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IIssueTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: TRANSACTION_TYPE.ISSUE;\n    /**\n     * @minLength 4\n     * @maxLength 16\n     */\n    name: string;\n    /**\n     * @maxLength 1000\n     */\n    description: string;\n    decimals: number;\n    quantity: LONG;\n    reissuable: boolean;\n    script?: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISetScriptTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: TRANSACTION_TYPE.SET_SCRIPT;\n    /**\n     * Compiled script encoded as base64 string\n     */\n    script: string | null;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISetAssetScriptTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: TRANSACTION_TYPE.SET_ASSET_SCRIPT;\n    assetId: string;\n    /**\n     * Compiled script encoded as base64 string\n     */\n    script: string | null;\n}\n/**\n * Used to transfer assets from one account to another.\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ITransferTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: TRANSACTION_TYPE.TRANSFER;\n    recipient: string;\n    amount: LONG;\n    attachment: string;\n    feeAssetId?: string | null;\n    assetId?: string | null;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IMassTransferItem<LONG = string | number> {\n    recipient: string;\n    amount: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IReissueTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: TRANSACTION_TYPE.REISSUE;\n    assetId: string;\n    quantity: LONG;\n    reissuable: boolean;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IBurnTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: TRANSACTION_TYPE.BURN;\n    assetId: string;\n    quantity: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IExchangeTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: TRANSACTION_TYPE.EXCHANGE;\n    order1: IOrder;\n    order2: IOrder;\n    price: LONG;\n    amount: LONG;\n    buyMatcherFee: LONG;\n    sellMatcherFee: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ILeaseTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: TRANSACTION_TYPE.LEASE;\n    amount: LONG;\n    recipient: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ICancelLeaseTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: TRANSACTION_TYPE.CANCEL_LEASE;\n    leaseId: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n * Library requires chainId to be present in this transaction, even thought node returns json without it\n */\n interface IAliasTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: TRANSACTION_TYPE.ALIAS;\n    alias: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IMassTransferTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: TRANSACTION_TYPE.MASS_TRANSFER;\n    transfers: IMassTransferItem<LONG>[];\n    attachment: string;\n    assetId?: string | null;\n}\n interface IDataEntry {\n    key: string;\n    type: DATA_FIELD_TYPE;\n    value: string | number | boolean;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISponsorshipTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: TRANSACTION_TYPE.SPONSORSHIP;\n    /**\n     * Minimal fee amount in sponsored asset. To disable sponsorship set it to 0\n     */\n    minSponsoredAssetFee: LONG;\n    /**\n     * AssetID of sponsored token\n     */\n    assetId: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IDataTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: TRANSACTION_TYPE.DATA;\n    data: IDataEntry[];\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IInvokeScriptPayment<LONG = string | number> {\n    assetId: string | null;\n    amount: LONG;\n}\n interface IInvokeScriptCall {\n    /**\n     * Function name\n     */\n    function: string;\n    /**\n     * Array of function arguments. E.g.:\n     * {type: 'integer', value: 200} or\n     * { type: 'binary', value: 'base64:AQa3b8tH'}\n     */\n    args: {\n        type: 'binary' | 'integer' | 'boolean' | 'string';\n        value: string | number | boolean;\n    }[];\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IInvokeScriptTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: TRANSACTION_TYPE.INVOKE_SCRIPT;\n    dApp: string;\n    feeAssetId?: string | null;\n    call?: IInvokeScriptCall;\n    payment?: IInvokeScriptPayment[];\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IOrder<LONG = string | number> extends WithProofs, WithSender {\n    version?: number;\n    orderType: 'buy' | 'sell';\n    assetPair: {\n        amountAsset: string | null;\n        priceAsset: string | null;\n    };\n    price: LONG;\n    amount: LONG;\n    timestamp: number;\n    expiration: number;\n    matcherFee: number;\n    matcherPublicKey: string;\n}\n interface IOrderV1<LONG = string | number> extends IOrder<LONG> {\n    version: 1 | undefined;\n}\n interface IOrderV2<LONG = string | number> extends IOrder<LONG> {\n    version: 2;\n}\n interface IOrderV3<LONG = string | number> extends IOrder<LONG> {\n    version: 3;\n    matcherFeeAssetId?: string | null;\n}\n declare type TOrder = IOrderV1 | IOrderV2 | IOrderV3;\n/**\n * CancelOrder object. When this object is sent to matcher, order with 'orderId' will be canceled\n */\n interface ICancelOrder {\n    sender: string;\n    orderId: string;\n    signature: string;\n}\n declare type TTxParams<LONG = string | number> = IAliasParams<LONG> | IBurnParams<LONG> | IInvokeScriptParams<LONG> | ICancelLeaseParams<LONG> | IDataParams<LONG> | IIssueParams<LONG> | ILeaseParams<LONG> | IMassTransferParams<LONG> | IReissueParams<LONG> | ISetAssetScriptParams<LONG> | ISetScriptParams<LONG> | ISponsorshipParams<LONG> | ITransferParams<LONG>;\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IBasicParams<LONG = string | number> {\n    /**\n     * Transaction fee. If not set, fee will be calculated automatically\n     */\n    fee?: LONG;\n    /**\n     * If fee is not set, this value will be added to automatically calculated fee. E.x.:\n     * Account is scripted and 400000 fee more is required.\n     */\n    additionalFee?: number;\n    /**\n     * If not set, public key will be derived from seed phrase. You should provide senderPublicKey in two cases:\n     * 1. Account, from which this tx should be sent, differs from tx signer. E.g., we have smart account that requires 2 signatures.\n     * 2. You to create tx without proof. Therefore no seed is provided.\n     */\n    senderPublicKey?: string;\n    /**\n     * Transaction timestamp. If not set current timestamp will be used. Date.now()\n     */\n    timestamp?: number;\n}\n interface WithChainIdParam {\n    /**\n     * Network byte. Could be set as number or as char.\n     * If set as char(string), charCodeAt(0) will be used. E.g.,\n     * 'W' will be converted to '87'\n     * If not set, 87 will be used as default\n     */\n    chainId?: string | number;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IAliasParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {\n    alias: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IBurnParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {\n    assetId: string;\n    quantity: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ICancelLeaseParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {\n    leaseId: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IDataParams<LONG = string | number> extends IBasicParams<LONG> {\n    data: Array<IDataEntry | TypelessDataEntry>;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IIssueParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {\n    /**\n     * @minLength 4\n     * @maxLength 16\n     */\n    name: string;\n    /**\n     * @maxLength 1000\n     */\n    description: string;\n    quantity: LONG;\n    decimals?: number;\n    reissuable?: boolean;\n    script?: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ILeaseParams<LONG = string | number> extends IBasicParams<LONG> {\n    recipient: string;\n    amount: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IMassTransferParams<LONG = string | number> extends IBasicParams<LONG> {\n    transfers: IMassTransferItem[];\n    /**\n     * Bytearray encoded as base string\n     */\n    attachment?: string;\n    assetId?: string | null;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IOrderParams<LONG = string | number> {\n    matcherPublicKey: string;\n    price: LONG;\n    amount: LONG;\n    orderType: 'buy' | 'sell';\n    amountAsset: string | null;\n    priceAsset: string | null;\n    senderPublicKey?: string;\n    matcherFee?: number;\n    timestamp?: number;\n    expiration?: number;\n    matcherFeeAssetId?: string | null;\n}\n interface ICancelOrderParams {\n    orderId: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IReissueParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {\n    assetId: string;\n    quantity: LONG;\n    reissuable: boolean;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISetAssetScriptParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {\n    /**\n     * Compiled script encoded as base64 string\n     */\n    script: string;\n    assetId: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISetScriptParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {\n    /**\n     * Compiled script encoded as base64 string\n     */\n    script: string | null;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISponsorshipParams<LONG = string | number> extends IBasicParams<LONG> {\n    /**\n     * AssetID of sponsored token\n     */\n    assetId: string;\n    /**\n     * Minimal fee amount in sponsored asset. To disable sponsorship set it to 0\n     */\n    minSponsoredAssetFee: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ITransferParams<LONG = string | number> extends IBasicParams<LONG> {\n    /**\n     * Can be either address(base58 encoded 24 byte address) or alias.\n     * Alias should be used like 'alias:{chainId}:{alias}>'. E.g.:\n     * If we have alias 'foo', and we want TESTNET transaction, recipient should be 'alias:T:foo'\n     */\n    recipient: string;\n    amount: LONG;\n    assetId?: string | null;\n    /**\n     * Fee can be paid in custom token if sponsorship has been set for this token\n     */\n    feeAssetId?: string | null;\n    /**\n     * Bytearray encoded as base58 string\n     */\n    attachment?: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IInvokeScriptParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {\n    dApp: string;\n    feeAssetId?: string | null;\n    call?: {\n        function: string;\n        args?: {\n            type: 'binary' | 'integer' | 'boolean' | 'string';\n            value: string | number | boolean;\n        }[];\n    };\n    payment?: {\n        assetId?: string | null;\n        amount: number;\n    }[];\n}\n",
    "// Type definitions for mocha 5.2\n// Project: https://mochajs.org\n// Definitions by: Kazi Manzur Rashid <https://github.com/kazimanzurrashid>\n//                 otiai10 <https://github.com/otiai10>\n//                 jt000 <https://github.com/jt000>\n//                 Vadim Macagon <https://github.com/enlight>\n//                 Andrew Bradley <https://github.com/cspotcode>\n//                 Dmitrii Sorin <https://github.com/1999>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.1\n\n/**\n * Mocha API\n *\n * @see https://mochajs.org/api/mocha\n */\ndeclare class Mocha {\n    private _growl;\n    private _reporter;\n    private _ui;\n\n    constructor(options?: Mocha.MochaOptions);\n\n    suite: Mocha.Suite;\n    files: string[];\n    options: Mocha.MochaInstanceOptions;\n\n    /**\n     * Enable or disable bailing on the first failure.\n     *\n     * @see https://mochajs.org/api/mocha#bail\n     */\n    bail(bail?: boolean): this;\n\n    /**\n     * Add test `file`.\n     *\n     * @see https://mochajs.org/api/mocha#addFile\n     */\n    addFile(file: string): this;\n\n    /**\n     * Set reporter to one of the built-in reporters.\n     *\n     * @see https://mochajs.org/api/mocha#reporter\n     */\n    reporter(reporter: Mocha.Reporter, reporterOptions?: any): this;\n\n    /**\n     * Set reporter to the provided constructor, one of the built-in reporters, or loads a reporter\n     * from a module path. Defaults to `\"spec\"`.\n     *\n     * @see https://mochajs.org/api/mocha#reporter\n     */\n    reporter(reporter?: string | Mocha.ReporterConstructor, reporterOptions?: any): this;\n\n    /**\n     * Set test UI to one of the built-in test interfaces.\n     *\n     * @see https://mochajs.org/api/mocha#ui\n     */\n    ui(name: Mocha.Interface): this;\n\n    /**\n     * Set test UI to one of the built-in test interfaces or loads a test interface from a module\n     * path. Defaults to `\"bdd\"`.\n     *\n     * @see https://mochajs.org/api/mocha#ui\n     */\n    ui(name?: string): this;\n\n    /**\n     * Escape string and add it to grep as a RegExp.\n     *\n     * @see https://mochajs.org/api/mocha#fgrep\n     */\n    fgrep(str: string): this;\n\n    /**\n     * Add regexp to grep, if `re` is a string it is escaped.\n     *\n     * @see https://mochajs.org/api/mocha#grep\n     */\n    grep(re: string | RegExp): this;\n\n    /**\n     * Invert `.grep()` matches.\n     *\n     * @see https://mochajs.org/api/mocha#invert\n     */\n    invert(): this;\n\n    /**\n     * Ignore global leaks.\n     *\n     * @see https://mochajs.org/api/mocha#ignoreLeaks\n     */\n    ignoreLeaks(ignore: boolean): this;\n\n    /**\n     * Enable global leak checking.\n     *\n     * @see https://mochajs.org/api/mocha#checkLeaks\n     */\n    checkLeaks(): this;\n\n    /**\n     * Display long stack-trace on failing\n     *\n     * @see https://mochajs.org/api/mocha#fullTrace\n     */\n    fullTrace(): this;\n\n    /**\n     * Enable growl support.\n     *\n     * @see https://mochajs.org/api/mocha#growl\n     */\n    growl(): this;\n\n    /**\n     * Ignore `globals` array or string.\n     *\n     * @see https://mochajs.org/api/mocha#globals\n     */\n    globals(globals: string | ReadonlyArray<string>): this;\n\n    /**\n     * Emit color output.\n     *\n     * @see https://mochajs.org/api/mocha#useColors\n     */\n    useColors(colors: boolean): this;\n\n    /**\n     * Use inline diffs rather than +/-.\n     *\n     * @see https://mochajs.org/api/mocha#useInlineDiffs\n     */\n    useInlineDiffs(inlineDiffs: boolean): this;\n\n    /**\n     * Do not show diffs at all.\n     *\n     * @see https://mochajs.org/api/mocha#hideDiff\n     */\n    hideDiff(hideDiff: boolean): this;\n\n    /**\n     * Set the timeout in milliseconds.\n     *\n     * @see https://mochajs.org/api/mocha#timeout\n     */\n    timeout(timeout: string | number): this;\n\n    /**\n     * Set the number of times to retry failed tests.\n     *\n     * @see https://mochajs.org/api/mocha#retries\n     */\n    retries(n: number): this;\n\n    /**\n     * Set slowness threshold in milliseconds.\n     *\n     * @see https://mochajs.org/api/mocha#slow\n     */\n    slow(slow: string | number): this;\n\n    /**\n     * Enable timeouts.\n     *\n     * @see https://mochajs.org/api/mocha#enableTimeouts\n     */\n    enableTimeouts(enabled?: boolean): this;\n\n    /**\n     * Makes all tests async (accepting a callback)\n     *\n     * @see https://mochajs.org/api/mocha#asyncOnly.\n     */\n    asyncOnly(): this;\n\n    /**\n     * Disable syntax highlighting (in browser).\n     *\n     * @see https://mochajs.org/api/mocha#noHighlighting\n     */\n    noHighlighting(): this;\n\n    /**\n     * Enable uncaught errors to propagate (in browser).\n     *\n     * @see https://mochajs.org/api/mocha#allowUncaught\n     */\n    allowUncaught(): boolean;\n\n    /**\n     * Delay root suite execution.\n     *\n     * @see https://mochajs.org/api/mocha#delay\n     */\n    delay(): boolean;\n\n    /**\n     * Tests marked only fail the suite\n     *\n     * @see https://mochajs.org/api/mocha#forbidOnly\n     */\n    forbidOnly(): boolean;\n\n    /**\n     * Pending tests and tests marked skip fail the suite\n     *\n     * @see https://mochajs.org/api/mocha#forbidPending\n     */\n    forbidPending(): boolean;\n\n    /**\n     * Run tests and invoke `fn()` when complete.\n     *\n     * Note that `run` relies on Node's `require` to execute\n     * the test interface functions and will be subject to the\n     * cache - if the files are already in the `require` cache,\n     * they will effectively be skipped. Therefore, to run tests\n     * multiple times or to run tests in files that are already\n     * in the `require` cache, make sure to clear them from the\n     * cache first in whichever manner best suits your needs.\n     *\n     * @see https://mochajs.org/api/mocha#run\n     */\n    run(fn?: (failures: number) => void): Mocha.Runner;\n\n    /**\n     * Load registered files.\n     *\n     * @see https://mochajs.org/api/mocha#loadFiles\n     */\n    protected loadFiles(fn?: () => void): void;\n}\n\ndeclare namespace Mocha {\n    namespace utils {\n        /**\n         * Compute a slug from the given `str`.\n         *\n         * @see https://mochajs.org/api/module-utils.html#.slug\n         */\n        function slug(str: string): string;\n\n        /**\n         * Strip the function definition from `str`, and re-indent for pre whitespace.\n         *\n         * @see https://mochajs.org/api/module-utils.html#.clean\n         */\n        function clean(str: string): string;\n\n        /**\n         * Highlight the given string of `js`.\n         */\n        function highlight(js: string): string;\n\n        /**\n         * Takes some variable and asks `Object.prototype.toString()` what it thinks it is.\n         */\n        function type(value: any): string;\n\n        /**\n         * Stringify `value`. Different behavior depending on type of value:\n         *\n         * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.\n         * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.\n         * - If `value` is an *empty* object, function, or array, returns `'{}'`, `'[Function]'`, or `'[]'` respectively.\n         * - If `value` has properties, call canonicalize} on it, then return result of `JSON.stringify()`\n         *\n         * @see https://mochajs.org/api/module-utils.html#.stringify\n         */\n        function stringify(value: any): string;\n\n        /**\n         * Return a new Thing that has the keys in sorted order. Recursive.\n         *\n         * If the Thing...\n         * - has already been seen, return string `'[Circular]'`\n         * - is `undefined`, return string `'[undefined]'`\n         * - is `null`, return value `null`\n         * - is some other primitive, return the value\n         * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method\n         * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.\n         * - is an empty `Array`, `Object`, or `Function`, returns `'[]'`, `'{}'`, or `'[Function]'` respectively.\n         *\n         * @see https://mochajs.org/api/module-utils.html#.canonicalize\n         */\n        function canonicalize(value: any, stack: any[], typeHint: string): any;\n\n        /**\n         * Lookup file names at the given `path`.\n         *\n         * @see https://mochajs.org/api/Mocha.utils.html#.exports.lookupFiles\n         */\n        function lookupFiles(filepath: string, extensions?: string[], recursive?: boolean): string[];\n\n        /**\n         * Generate an undefined error with a message warning the user.\n         *\n         * @see https://mochajs.org/api/module-utils.html#.undefinedError\n         */\n        function undefinedError(): Error;\n\n        /**\n         * Generate an undefined error if `err` is not defined.\n         *\n         * @see https://mochajs.org/api/module-utils.html#.getError\n         */\n        function getError(err: Error | undefined): Error;\n\n        /**\n         * When invoking this function you get a filter function that get the Error.stack as an\n         * input, and return a prettify output. (i.e: strip Mocha and internal node functions from\n         * stack trace).\n         *\n         * @see https://mochajs.org/api/module-utils.html#.stackTraceFilter\n         */\n        function stackTraceFilter(): (stack: string) => string;\n    }\n\n    namespace interfaces {\n        function bdd(suite: Suite): void;\n        function tdd(suite: Suite): void;\n        function qunit(suite: Suite): void;\n        function exports(suite: Suite): void;\n    }\n\n    // #region Test interface augmentations\n\n    interface HookFunction {\n        /**\n         * [bdd, qunit, tdd] Describe a \"hook\" to execute the given callback `fn`. The name of the\n         * function is used as the name of the hook.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: Func): void;\n\n        /**\n         * [bdd, qunit, tdd] Describe a \"hook\" to execute the given callback `fn`. The name of the\n         * function is used as the name of the hook.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: AsyncFunc): void;\n\n        /**\n         * [bdd, qunit, tdd] Describe a \"hook\" to execute the given `title` and callback `fn`.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (name: string, fn?: Func): void;\n\n        /**\n         * [bdd, qunit, tdd] Describe a \"hook\" to execute the given `title` and callback `fn`.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (name: string, fn?: AsyncFunc): void;\n    }\n\n    interface SuiteFunction {\n        /**\n         * [bdd, tdd] Describe a \"suite\" with the given `title` and callback `fn` containing\n         * nested suites.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn: (this: Suite) => void): Suite;\n\n        /**\n         * [qunit] Describe a \"suite\" with the given `title`.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string): Suite;\n\n        /**\n         * [bdd, tdd, qunit] Indicates this suite should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        only: ExclusiveSuiteFunction;\n\n        /**\n         * [bdd, tdd] Indicates this suite should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        skip: PendingSuiteFunction;\n    }\n\n    interface ExclusiveSuiteFunction {\n        /**\n         * [bdd, tdd] Describe a \"suite\" with the given `title` and callback `fn` containing\n         * nested suites. Indicates this suite should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn: (this: Suite) => void): Suite;\n\n        /**\n         * [qunit] Describe a \"suite\" with the given `title`. Indicates this suite should be executed\n         * exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string): Suite;\n    }\n\n    /**\n     * [bdd, tdd] Describe a \"suite\" with the given `title` and callback `fn` containing\n     * nested suites. Indicates this suite should not be executed.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @returns [bdd] `Suite`\n     * @returns [tdd] `void`\n     */\n    interface PendingSuiteFunction {\n        (title: string, fn: (this: Suite) => void): Suite | void;\n    }\n\n    interface TestFunction {\n        /**\n         * Describe a specification or test-case with the given callback `fn` acting as a thunk.\n         * The name of the function is used as the name of the test.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: Func): Test;\n\n        /**\n         * Describe a specification or test-case with the given callback `fn` acting as a thunk.\n         * The name of the function is used as the name of the test.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: AsyncFunc): Test;\n\n        /**\n         * Describe a specification or test-case with the given `title` and callback `fn` acting\n         * as a thunk.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: Func): Test;\n\n        /**\n         * Describe a specification or test-case with the given `title` and callback `fn` acting\n         * as a thunk.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: AsyncFunc): Test;\n\n        /**\n         * Indicates this test should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        only: ExclusiveTestFunction;\n\n        /**\n         * Indicates this test should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        skip: PendingTestFunction;\n\n        /**\n         * Number of attempts to retry.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        retries(n: number): void;\n    }\n\n    interface ExclusiveTestFunction {\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`\n         * acting as a thunk. The name of the function is used as the name of the test. Indicates\n         * this test should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: Func): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`\n         * acting as a thunk. The name of the function is used as the name of the test. Indicates\n         * this test should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: AsyncFunc): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and\n         * callback `fn` acting as a thunk. Indicates this test should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: Func): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and\n         * callback `fn` acting as a thunk. Indicates this test should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: AsyncFunc): Test;\n    }\n\n    interface PendingTestFunction {\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`\n         * acting as a thunk. The name of the function is used as the name of the test. Indicates\n         * this test should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: Func): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`\n         * acting as a thunk. The name of the function is used as the name of the test. Indicates\n         * this test should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: AsyncFunc): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and\n         * callback `fn` acting as a thunk. Indicates this test should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: Func): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and\n         * callback `fn` acting as a thunk. Indicates this test should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: AsyncFunc): Test;\n    }\n\n    /**\n     * Execute after each test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#afterEach\n     */\n    let afterEach: HookFunction;\n\n    /**\n     * Execute after running tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#after\n     */\n    let after: HookFunction;\n\n    /**\n     * Execute before each test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#beforeEach\n     */\n    let beforeEach: HookFunction;\n\n    /**\n     * Execute before running tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#before\n     */\n    let before: HookFunction;\n\n    /**\n     * Describe a \"suite\" containing nested suites and tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     */\n    let describe: SuiteFunction;\n\n    /**\n     * Describes a test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     */\n    let it: TestFunction;\n\n    /**\n     * Describes a pending test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     */\n    let xit: PendingTestFunction;\n\n    /**\n     * Execute before each test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#beforeEach\n     */\n    let setup: HookFunction;\n\n    /**\n     * Execute before running tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#before\n     */\n    let suiteSetup: HookFunction;\n\n    /**\n     * Execute after running tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#after\n     */\n    let suiteTeardown: HookFunction;\n\n    /**\n     * Describe a \"suite\" containing nested suites and tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     */\n    let suite: SuiteFunction;\n\n    /**\n     * Execute after each test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#afterEach\n     */\n    let teardown: HookFunction;\n\n    /**\n     * Describes a test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     */\n    let test: TestFunction;\n\n    /**\n     * Triggers root suite execution.\n     *\n     * - _Only available if flag --delay is passed into Mocha._\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#runWithSuite\n     */\n    function run(): void;\n\n    // #endregion Test interface augmentations\n\n    namespace reporters {\n        /**\n         * Initialize a new `Base` reporter.\n         *\n         * All other reporters generally inherit from this reporter, providing stats such as test duration,\n         * number of tests passed / failed, etc.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Base.html\n         */\n        class Base {\n            constructor(runner: Runner, options?: MochaOptions);\n            /** @deprecated Use the overload that accepts `Mocha.Runner` instead. */\n            constructor(runner: IRunner, options?: MochaOptions);\n\n            /**\n             * Test run statistics\n             */\n            stats: Stats;\n\n            /**\n             * Test failures\n             */\n            failures: Test[];\n\n            /**\n             * The configured runner\n             */\n            runner: Runner;\n\n            /**\n             * Output common epilogue used by many of the bundled reporters.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.Base.html#.Base#epilogue\n             */\n            epilogue(): void;\n\n            done?(failures: number, fn?: (failures: number) => void): void;\n        }\n\n        namespace Base {\n            /**\n             * Enables coloring by default\n             *\n             * @see https://mochajs.org/api/module-base#.useColors\n             */\n            let useColors: boolean;\n\n            /**\n             * Inline diffs instead of +/-\n             *\n             * @see https://mochajs.org/api/module-base#.inlineDiffs\n             */\n            let inlineDiffs: boolean;\n\n            /**\n             * Default color map\n             *\n             * @see https://mochajs.org/api/module-base#.colors\n             */\n            const colors: ColorMap;\n\n            /**\n             * Default color map\n             *\n             * @see https://mochajs.org/api/module-base#.colors\n             */\n            interface ColorMap {\n                // added by Base\n                pass: number;\n                fail: number;\n                \"bright pass\": number;\n                \"bright fail\": number;\n                \"bright yellow\": number;\n                pending: number;\n                suite: number;\n                \"error title\": number;\n                \"error message\": number;\n                \"error stack\": number;\n                checkmark: number;\n                fast: number;\n                medium: number;\n                slow: number;\n                green: number;\n                light: number;\n                \"diff gutter\": number;\n                \"diff added\": number;\n                \"diff removed\": number;\n\n                // added by Progress\n                progress: number;\n\n                // added by Landing\n                plane: number;\n                \"plane crash\": number;\n                runway: number;\n\n                [key: string]: number;\n            }\n\n            /**\n             * Default symbol map\n             *\n             * @see https://mochajs.org/api/module-base#.symbols\n             */\n            const symbols: SymbolMap;\n\n            /**\n             * Default symbol map\n             *\n             * @see https://mochajs.org/api/module-base#.symbols\n             */\n            interface SymbolMap {\n                ok: string;\n                err: string;\n                dot: string;\n                comma: string;\n                bang: string;\n                [key: string]: string;\n            }\n\n            /**\n             * Color `str` with the given `type` (from `colors`)\n             *\n             * @see https://mochajs.org/api/module-base#.color\n             */\n            function color(type: string, str: string): string;\n\n            /**\n             * Expose terminal window size\n             *\n             * @see https://mochajs.org/api/module-base#.window\n             */\n            const window: {\n                width: number;\n            };\n\n            /**\n             * ANSI TTY control sequences common among reporters.\n             *\n             * @see https://mochajs.org/api/module-base#.cursor\n             */\n            namespace cursor {\n                /**\n                 * Hides the cursor\n                 */\n                function hide(): void;\n\n                /**\n                 * Shows the cursor\n                 */\n                function show(): void;\n\n                /**\n                 * Deletes the current line\n                 */\n                function deleteLine(): void;\n\n                /**\n                 * Moves to the beginning of the line\n                 */\n                function beginningOfLine(): void;\n\n                /**\n                 * Clears the line and moves to the beginning of the line.\n                 */\n                function CR(): void;\n            }\n\n            /**\n             * Returns a diff between two strings with colored ANSI output.\n             *\n             * @see https://mochajs.org/api/module-base#.generateDiff\n             */\n            function generateDiff(actual: string, expected: string): string;\n\n            /**\n             * Output the given `failures` as a list.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.Base.html#.exports.list1\n             */\n            function list(failures: Test[]): void;\n        }\n\n        /**\n         * Initialize a new `Dot` matrix test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Dot.html\n         */\n        class Dot extends Base {\n        }\n\n        /**\n         * Initialize a new `Doc` reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Doc.html\n         */\n        class Doc extends Base {\n        }\n\n        /**\n         * Initialize a new `TAP` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.TAP.html\n         */\n        class TAP extends Base {\n        }\n\n        /**\n         * Initialize a new `JSON` reporter\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.JSON.html\n         */\n        class JSON extends Base {\n        }\n\n        /**\n         * Initialize a new `HTML` reporter.\n         *\n         * - _This reporter cannot be used on the console._\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.HTML.html\n         */\n        class HTML extends Base {\n            /**\n             * Provide suite URL.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.HTML.html#suiteURL\n             */\n            suiteURL(suite: Suite): string;\n\n            /**\n             * Provide test URL.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.HTML.html#testURL\n             */\n            testURL(test: Test): string;\n\n            /**\n             * Adds code toggle functionality for the provided test's list element.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.HTML.html#addCodeToggle\n             */\n            addCodeToggle(el: HTMLLIElement, contents: string): void;\n        }\n\n        /**\n         * Initialize a new `List` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.List.html\n         */\n        class List extends Base {\n        }\n\n        /**\n         * Initialize a new `Min` minimal test reporter (best used with --watch).\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Min.html\n         */\n        class Min extends Base {\n        }\n\n        /**\n         * Initialize a new `Spec` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Spec.html\n         */\n        class Spec extends Base {\n        }\n\n        /**\n         * Initialize a new `NyanCat` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Nyan.html\n         */\n        class Nyan extends Base {\n            private colorIndex;\n            private numberOfLines;\n            private rainbowColors;\n            private scoreboardWidth;\n            private tick;\n            private trajectories;\n            private trajectoryWidthMax;\n            private draw;\n            private drawScoreboard;\n            private appendRainbow;\n            private drawRainbow;\n            private drawNyanCat;\n            private face;\n            private cursorUp;\n            private cursorDown;\n            private generateColors;\n            private rainbowify;\n        }\n\n        /**\n         * Initialize a new `XUnit` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.XUnit.html\n         */\n        class XUnit extends Base {\n            constructor(runner: Runner, options?: XUnit.MochaOptions);\n            /** @deprecated Use the overload that accepts `Mocha.Runner` instead. */\n            constructor(runner: IRunner, options?: XUnit.MochaOptions);\n\n            /**\n             * Override done to close the stream (if it's a file).\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.XUnit.html#done\n             */\n            done(failures: number, fn: (failures: number) => void): void;\n\n            /**\n             * Write out the given line.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.XUnit.html#write\n             */\n            write(line: string): void;\n\n            /**\n             * Output tag for the given `test.`\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.XUnit.html#test\n             */\n            test(test: Test): void;\n        }\n\n        namespace XUnit {\n            interface MochaOptions extends Mocha.MochaOptions {\n                reporterOptions?: ReporterOptions;\n            }\n\n            interface ReporterOptions {\n                output?: string;\n                suiteName?: string;\n            }\n        }\n\n        /**\n         * Initialize a new `Markdown` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Markdown.html\n         */\n        class Markdown extends Base {\n        }\n\n        /**\n         * Initialize a new `Progress` bar test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Progress.html\n         */\n        class Progress extends Base {\n            constructor(runner: Runner, options?: Progress.MochaOptions);\n            /** @deprecated Use the overload that accepts `Mocha.Runner` instead. */\n            constructor(runner: IRunner, options?: Progress.MochaOptions);\n        }\n\n        namespace Progress {\n            interface MochaOptions extends Mocha.MochaOptions {\n                reporterOptions?: ReporterOptions;\n            }\n\n            interface ReporterOptions {\n                open?: string;\n                complete?: string;\n                incomplete?: string;\n                close?: string;\n                verbose?: boolean;\n            }\n        }\n\n        /**\n         * Initialize a new `Landing` reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Landing.html\n         */\n        class Landing extends Base {\n        }\n\n        /**\n         * Initialize a new `JSONStream` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.JSONStream.html\n         */\n        class JSONStream extends Base {\n        }\n\n        // value-only aliases\n        const base: typeof Base;\n        const dot: typeof Dot;\n        const doc: typeof Doc;\n        const tap: typeof TAP;\n        const json: typeof JSON;\n        const html: typeof HTML;\n        const list: typeof List;\n        const spec: typeof Spec;\n        const nyan: typeof Nyan;\n        const xunit: typeof XUnit;\n        const markdown: typeof Markdown;\n        const progress: typeof Progress;\n        const landing: typeof Landing;\n        // NOTE: not possible to type this correctly:\n        // const \"json-stream\": typeof JSONStream;\n    }\n\n    /**\n     * Initialize a new `Runnable` with the given `title` and callback `fn`.\n     *\n     * @see https://mochajs.org/api/Runnable.html\n     */\n    class Runnable {\n        private _slow;\n        private _enableTimeouts;\n        private _retries;\n        private _currentRetry;\n        private _timeout;\n        private _timeoutError;\n\n        constructor(title: string, fn?: Func | AsyncFunc);\n\n        title: string;\n        fn: Func | AsyncFunc | undefined;\n        body: string;\n        async: boolean;\n        sync: boolean;\n        timedOut: boolean;\n        pending: boolean;\n        duration?: number;\n        parent?: Suite;\n        state?: \"failed\" | \"passed\";\n        timer?: any;\n        ctx?: Context;\n        callback?: Done;\n        allowUncaught?: boolean;\n        file?: string;\n\n        /**\n         * Get test timeout.\n         *\n         * @see https://mochajs.org/api/Runnable.html#timeout\n         */\n        timeout(): number;\n\n        /**\n         * Set test timeout.\n         *\n         * @see https://mochajs.org/api/Runnable.html#timeout\n         */\n        timeout(ms: string | number): this;\n\n        /**\n         * Get test slowness threshold.\n         *\n         * @see https://mochajs.org/api/Runnable.html#slow\n         */\n        slow(): number;\n\n        /**\n         * Set test slowness threshold.\n         *\n         * @see https://mochajs.org/api/Runnable.html#slow\n         */\n        slow(ms: string | number): this;\n\n        /**\n         * Get whether timeouts are enabled.\n         *\n         * @see https://mochajs.org/api/Runnable.html#enableTimeouts\n         */\n        enableTimeouts(): boolean;\n\n        /**\n         * Set whether timeouts are enabled.\n         *\n         * @see https://mochajs.org/api/Runnable.html#enableTimeouts\n         */\n        enableTimeouts(enabled: boolean): this;\n\n        /**\n         * Halt and mark as pending.\n         */\n        skip(): never;\n\n        /**\n         * Check if this runnable or its parent suite is marked as pending.\n         *\n         * @see https://mochajs.org/api/Runnable.html#isPending\n         */\n        isPending(): boolean;\n\n        /**\n         * Return `true` if this Runnable has failed.\n         */\n        isFailed(): boolean;\n\n        /**\n         * Return `true` if this Runnable has passed.\n         */\n        isPassed(): boolean;\n\n        /**\n         * Set or get number of retries.\n         *\n         * @see https://mochajs.org/api/Runnable.html#retries\n         */\n        retries(): number;\n\n        /**\n         * Set or get number of retries.\n         *\n         * @see https://mochajs.org/api/Runnable.html#retries\n         */\n        retries(n: number): void;\n\n        /**\n         * Set or get current retry\n         *\n         * @see https://mochajs.org/api/Runnable.html#currentRetry\n         */\n        protected currentRetry(): number;\n\n        /**\n         * Set or get current retry\n         *\n         * @see https://mochajs.org/api/Runnable.html#currentRetry\n         */\n        protected currentRetry(n: number): void;\n\n        /**\n         * Return the full title generated by recursively concatenating the parent's full title.\n         */\n        fullTitle(): string;\n\n        /**\n         * Return the title path generated by concatenating the parent's title path with the title.\n         */\n        titlePath(): string[];\n\n        /**\n         * Clear the timeout.\n         *\n         * @see https://mochajs.org/api/Runnable.html#clearTimeout\n         */\n        clearTimeout(): void;\n\n        /**\n         * Inspect the runnable void of private properties.\n         *\n         * @see https://mochajs.org/api/Runnable.html#inspect\n         */\n        inspect(): string;\n\n        /**\n         * Reset the timeout.\n         *\n         * @see https://mochajs.org/api/Runnable.html#resetTimeout\n         */\n        resetTimeout(): void;\n\n        /**\n         * Get a list of whitelisted globals for this test run.\n         *\n         * @see https://mochajs.org/api/Runnable.html#globals\n         */\n        globals(): string[];\n\n        /**\n         * Set a list of whitelisted globals for this test run.\n         *\n         * @see https://mochajs.org/api/Runnable.html#globals\n         */\n        globals(globals: ReadonlyArray<string>): void;\n\n        /**\n         * Run the test and invoke `fn(err)`.\n         *\n         * @see https://mochajs.org/api/Runnable.html#run\n         */\n        run(fn: Done): void;\n    }\n\n    // #region Runnable \"error\" event\n    interface Runnable extends NodeJS.EventEmitter {\n        on(event: \"error\", listener: (error: any) => void): this;\n        once(event: \"error\", listener: (error: any) => void): this;\n        addListener(event: \"error\", listener: (error: any) => void): this;\n        removeListener(event: \"error\", listener: (error: any) => void): this;\n        prependListener(event: \"error\", listener: (error: any) => void): this;\n        prependOnceListener(event: \"error\", listener: (error: any) => void): this;\n        emit(name: \"error\", error: any): boolean;\n    }\n    // #endregion Runnable \"error\" event\n    // #region Runnable untyped events\n    interface Runnable extends NodeJS.EventEmitter {\n        on(event: string, listener: (...args: any[]) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        removeListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        emit(name: string, ...args: any[]): boolean;\n    }\n    // #endregion Runnable untyped events\n\n    /**\n     * Test context\n     *\n     * @see https://mochajs.org/api/module-Context.html#~Context\n     */\n    class Context {\n        private _runnable;\n\n        test?: Runnable;\n        currentTest?: Test;\n\n        /**\n         * Get the context `Runnable`.\n         */\n        runnable(): Runnable;\n\n        /**\n         * Set the context `Runnable`.\n         */\n        runnable(runnable: Runnable): this;\n        /** @deprecated Use the overload that accepts `Mocha.Runnable` instead. */\n        runnable(runnable: IRunnable): this;\n\n        /**\n         * Get test timeout.\n         */\n        timeout(): number;\n\n        /**\n         * Set test timeout.\n         */\n        timeout(ms: string | number): this;\n\n        /**\n         * Get whether timeouts are enabled.\n         */\n        enableTimeouts(): boolean;\n\n        /**\n         * Set whether timeouts are enabled.\n         */\n        enableTimeouts(enabled: boolean): this;\n\n        /**\n         * Get test slowness threshold.\n         */\n        slow(): number;\n\n        /**\n         * Set test slowness threshold.\n         */\n        slow(ms: string | number): this;\n\n        /**\n         * Mark a test as skipped.\n         */\n        skip(): never;\n\n        /**\n         * Get the number of allowed retries on failed tests.\n         */\n        retries(): number;\n\n        /**\n         * Set the number of allowed retries on failed tests.\n         */\n        retries(n: number): this;\n\n        [key: string]: any;\n    }\n\n    /**\n     * Initialize a `Runner` for the given `suite`.\n     *\n     * @see https://mochajs.org/api/Mocha.Runner.html\n     */\n    class Runner {\n        private _globals;\n        private _abort;\n        private _delay;\n        private _defaultGrep;\n        private next;\n        private hookErr;\n        private prevGlobalsLength;\n        private nextSuite;\n\n        constructor(suite: Suite, delay: boolean);\n\n        /** @deprecated Use the overload that accepts `Mocha.Suite` instead. */\n        constructor(suite: ISuite, delay: boolean);\n\n        suite: Suite;\n        started: boolean;\n        total: number;\n        failures: number;\n        asyncOnly?: boolean;\n        allowUncaught?: boolean;\n        fullStackTrace?: boolean;\n        forbidOnly?: boolean;\n        forbidPending?: boolean;\n        ignoreLeaks?: boolean;\n        test?: Test;\n        currentRunnable?: Runnable;\n        stats?: Stats; // added by reporters\n\n        /**\n         * Run tests with full titles matching `re`. Updates runner.total\n         * with number of tests matched.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#grep\n         */\n        grep(re: RegExp, invert: boolean): this;\n\n        /**\n         * Returns the number of tests matching the grep search for the\n         * given suite.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#grepTotal\n         */\n        grepTotal(suite: Suite): number;\n\n        /** @deprecated Use the overload that accepts `Mocha.Suite` instead. */\n        grepTotal(suite: ISuite): number;\n\n        /**\n         * Gets the allowed globals.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#globals\n         */\n        globals(): string[];\n\n        /**\n         * Allow the given `arr` of globals.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#globals\n         */\n        globals(arr: ReadonlyArray<string>): this;\n\n        /**\n         * Run the root suite and invoke `fn(failures)` on completion.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#run\n         */\n        run(fn?: (failures: number) => void): this;\n\n        /**\n         * Cleanly abort execution.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#abort\n         */\n        abort(): this;\n\n        /**\n         * Handle uncaught exceptions.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#uncaught\n         */\n        uncaught(err: any): void;\n\n        /**\n         * Wrapper for setImmediate, process.nextTick, or browser polyfill.\n         */\n        protected static immediately(callback: Function): void;\n\n        /**\n         * Return a list of global properties.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#globalProps\n         */\n        protected globalProps(): string[];\n\n        /**\n         * Check for global variable leaks.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#checkGlobals\n         */\n        protected checkGlobals(test: Test): void;\n\n        /**\n         * Fail the given `test`.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#fail\n         */\n        protected fail(test: Test, err: any): void;\n\n        /**\n         * Fail the given `hook` with `err`.\n         *\n         * Hook failures work in the following pattern:\n         * - If bail, then exit\n         * - Failed `before` hook skips all tests in a suite and subsuites,\n         *   but jumps to corresponding `after` hook\n         * - Failed `before each` hook skips remaining tests in a\n         *   suite and jumps to corresponding `after each` hook,\n         *   which is run only once\n         * - Failed `after` hook does not alter\n         *   execution order\n         * - Failed `after each` hook skips remaining tests in a\n         *   suite and subsuites, but executes other `after each`\n         *   hooks\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#failHook\n         */\n        protected failHook(hook: Hook, err: any): void;\n\n        /**\n         * Run hook `name` callbacks and then invoke `fn()`.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#hook\n         */\n        protected hook(name: string, fn: () => void): void;\n\n        /**\n         * Run hook `name` for the given array of `suites`\n         * in order, and callback `fn(err, errSuite)`.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#hooks\n         */\n        protected hooks(name: string, suites: Suite[], fn: (err?: any, errSuite?: Suite) => void): void;\n\n        /**\n         * Run hooks from the top level down.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#hookUp\n         */\n        protected hookUp(name: string, fn: (err?: any, errSuite?: Suite) => void): void;\n\n        /**\n         * Run hooks from the bottom up.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#hookDown\n         */\n        protected hookDown(name: string, fn: (err?: any, errSuite?: Suite) => void): void;\n\n        /**\n         * Return an array of parent Suites from closest to furthest.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#parents\n         */\n        protected parents(): Suite[];\n\n        /**\n         * Run the current test and callback `fn(err)`.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#runTest\n         */\n        protected runTest(fn: Done): any;\n\n        /**\n         * Run tests in the given `suite` and invoke the callback `fn()` when complete.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#runTests\n         */\n        protected runTests(suite: Suite, fn: (errSuite?: Suite) => void): void;\n\n        /**\n         * Run the given `suite` and invoke the callback `fn()` when complete.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#runSuite\n         */\n        protected runSuite(suite: Suite, fn: (errSuite?: Suite) => void): void;\n    }\n\n    // #region Runner \"waiting\" event\n    interface Runner {\n        on(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        once(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        addListener(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        removeListener(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        prependListener(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        prependOnceListener(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        emit(name: \"waiting\", rootSuite: Suite): boolean;\n    }\n    // #endregion Runner \"waiting\" event\n    // #region Runner \"start\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"start\", listener: () => void): this;\n        once(event: \"start\", listener: () => void): this;\n        addListener(event: \"start\", listener: () => void): this;\n        removeListener(event: \"start\", listener: () => void): this;\n        prependListener(event: \"start\", listener: () => void): this;\n        prependOnceListener(event: \"start\", listener: () => void): this;\n        emit(name: \"start\"): boolean;\n    }\n    // #endregion Runner \"start\" event\n    // #region Runner \"end\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"end\", listener: () => void): this;\n        once(event: \"end\", listener: () => void): this;\n        addListener(event: \"end\", listener: () => void): this;\n        removeListener(event: \"end\", listener: () => void): this;\n        prependListener(event: \"end\", listener: () => void): this;\n        prependOnceListener(event: \"end\", listener: () => void): this;\n        emit(name: \"end\"): boolean;\n    }\n    // #endregion Runner \"end\" event\n    // #region Runner \"suite\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"suite\", listener: (suite: Suite) => void): this;\n        once(event: \"suite\", listener: (suite: Suite) => void): this;\n        addListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        removeListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        prependListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        prependOnceListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        emit(name: \"suite\", suite: Suite): boolean;\n    }\n    // #endregion Runner \"suite\" event\n    // #region Runner \"suite end\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"suite end\", listener: (suite: Suite) => void): this;\n        once(event: \"suite end\", listener: (suite: Suite) => void): this;\n        addListener(event: \"suite end\", listener: (suite: Suite) => void): this;\n        removeListener(event: \"suite end\", listener: (suite: Suite) => void): this;\n        prependListener(event: \"suite end\", listener: (suite: Suite) => void): this;\n        prependOnceListener(event: \"suite end\", listener: (suite: Suite) => void): this;\n        emit(name: \"suite end\", suite: Suite): boolean;\n    }\n    // #endregion Runner \"suite end\" event\n    // #region Runner \"test\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"test\", listener: (test: Test) => void): this;\n        once(event: \"test\", listener: (test: Test) => void): this;\n        addListener(event: \"test\", listener: (test: Test) => void): this;\n        removeListener(event: \"test\", listener: (test: Test) => void): this;\n        prependListener(event: \"test\", listener: (test: Test) => void): this;\n        prependOnceListener(event: \"test\", listener: (test: Test) => void): this;\n        emit(name: \"test\", test: Test): boolean;\n    }\n    // #endregion Runner \"test\" event\n    // #region Runner \"test end\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"test end\", listener: (test: Test) => void): this;\n        once(event: \"test end\", listener: (test: Test) => void): this;\n        addListener(event: \"test end\", listener: (test: Test) => void): this;\n        removeListener(event: \"test end\", listener: (test: Test) => void): this;\n        prependListener(event: \"test end\", listener: (test: Test) => void): this;\n        prependOnceListener(event: \"test end\", listener: (test: Test) => void): this;\n        emit(name: \"test end\", test: Test): boolean;\n    }\n    // #endregion Runner \"test end\" event\n    // #region Runner \"hook\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"hook\", listener: (hook: Hook) => void): this;\n        once(event: \"hook\", listener: (hook: Hook) => void): this;\n        addListener(event: \"hook\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"hook\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"hook\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"hook\", listener: (hook: Hook) => void): this;\n        emit(name: \"hook\", hook: Hook): boolean;\n    }\n    // #endregion Runner \"hook\" event\n    // #region Runner \"hook end\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"hook end\", listener: (hook: Hook) => void): this;\n        once(event: \"hook end\", listener: (hook: Hook) => void): this;\n        addListener(event: \"hook end\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"hook end\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"hook end\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"hook end\", listener: (hook: Hook) => void): this;\n        emit(name: \"hook end\", hook: Hook): boolean;\n    }\n    // #endregion Runner \"hook end\" event\n    // #region Runner \"pass\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"pass\", listener: (test: Test) => void): this;\n        once(event: \"pass\", listener: (test: Test) => void): this;\n        addListener(event: \"pass\", listener: (test: Test) => void): this;\n        removeListener(event: \"pass\", listener: (test: Test) => void): this;\n        prependListener(event: \"pass\", listener: (test: Test) => void): this;\n        prependOnceListener(event: \"pass\", listener: (test: Test) => void): this;\n        emit(name: \"pass\", test: Test): boolean;\n    }\n    // #endregion Runner \"pass\" event\n    // #region Runner \"fail\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        once(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        addListener(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        removeListener(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        prependListener(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        prependOnceListener(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        emit(name: \"fail\", test: Test, err: any): boolean;\n    }\n    // #endregion Runner \"fail\" event\n    // #region Runner \"pending\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"pending\", listener: (test: Test) => void): this;\n        once(event: \"pending\", listener: (test: Test) => void): this;\n        addListener(event: \"pending\", listener: (test: Test) => void): this;\n        removeListener(event: \"pending\", listener: (test: Test) => void): this;\n        prependListener(event: \"pending\", listener: (test: Test) => void): this;\n        prependOnceListener(event: \"pending\", listener: (test: Test) => void): this;\n        emit(name: \"pending\", test: Test): boolean;\n    }\n    // #endregion Runner \"pending\" event\n    // #region Runner untyped events\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: string, listener: (...args: any[]) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        removeListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        emit(name: string, ...args: any[]): boolean;\n    }\n    // #endregion Runner untyped events\n\n    /**\n     * Initialize a new `Suite` with the given `title` and `ctx`.\n     *\n     * @see https://mochajs.org/api/Mocha.Suite.html\n     */\n    class Suite {\n        private _beforeEach;\n        private _beforeAll;\n        private _afterEach;\n        private _afterAll;\n        private _timeout;\n        private _enableTimeouts;\n        private _slow;\n        private _bail;\n        private _retries;\n        private _onlyTests;\n        private _onlySuites;\n\n        constructor(title: string, parentContext?: Context);\n        /** @deprecated Use the overload that accepts `Mocha.Context` instead. */\n        constructor(title: string, parentContext?: IContext);\n\n        ctx: Context;\n        suites: Suite[];\n        tests: Test[];\n        pending: boolean;\n        file?: string;\n        root: boolean;\n        delayed: boolean;\n        parent: Suite | undefined;\n        title: string;\n\n        /**\n         * Create a new `Suite` with the given `title` and parent `Suite`. When a suite\n         * with the same title is already present, that suite is returned to provide\n         * nicer reporter and more flexible meta-testing.\n         *\n         * @see https://mochajs.org/api/mocha#.exports.create\n         */\n        static create(parent: Suite, title: string): Suite;\n        /** @deprecated Use the overload that accepts `Mocha.Suite` instead. */\n        static create(parent: ISuite, title: string): Suite;\n\n        /**\n         * Return a clone of this `Suite`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#clone\n         */\n        clone(): Suite;\n\n        /**\n         * Get timeout `ms`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#timeout\n         */\n        timeout(): number;\n\n        /**\n         * Set timeout `ms` or short-hand such as \"2s\".\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#timeout\n         */\n        timeout(ms: string | number): this;\n\n        /**\n         * Get number of times to retry a failed test.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#retries\n         */\n        retries(): number;\n\n        /**\n         * Set number of times to retry a failed test.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#retries\n         */\n        retries(n: string | number): this;\n\n        /**\n         * Get whether timeouts are enabled.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#enableTimeouts\n         */\n        enableTimeouts(): boolean;\n\n        /**\n         * Set whether timeouts are `enabled`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#enableTimeouts\n         */\n        enableTimeouts(enabled: boolean): this;\n\n        /**\n         * Get slow `ms`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#slow\n         */\n        slow(): number;\n\n        /**\n         * Set slow `ms` or short-hand such as \"2s\".\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#slow\n         */\n        slow(ms: string | number): this;\n\n        /**\n         * Get whether to bail after first error.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#bail\n         */\n        bail(): boolean;\n\n        /**\n         * Set whether to bail after first error.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#bail\n         */\n        bail(bail: boolean): this;\n\n        /**\n         * Check if this suite or its parent suite is marked as pending.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#isPending\n         */\n        isPending(): boolean;\n\n        /**\n         * Run `fn(test[, done])` before running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll\n         */\n        beforeAll(fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` before running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll\n         */\n        beforeAll(fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` before running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll\n         */\n        beforeAll(title: string, fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` before running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll\n         */\n        beforeAll(title: string, fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` after running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterAll\n         */\n        afterAll(fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` after running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterAll\n         */\n        afterAll(fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` after running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterAll\n         */\n        afterAll(title: string, fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` after running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterAll\n         */\n        afterAll(title: string, fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` before each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach\n         */\n        beforeEach(fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` before each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach\n         */\n        beforeEach(fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` before each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach\n         */\n        beforeEach(title: string, fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` before each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach\n         */\n        beforeEach(title: string, fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` after each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterEach\n         */\n        afterEach(fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` after each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterEach\n         */\n        afterEach(fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` after each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterEach\n         */\n        afterEach(title: string, fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` after each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterEach\n         */\n        afterEach(title: string, fn?: AsyncFunc): this;\n\n        /**\n         * Add a test `suite`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#addSuite\n         */\n        addSuite(suite: Suite): this;\n        /** @deprecated Use the overload that accepts `Mocha.ISuite` instead. */\n        addSuite(suite: ISuite): this;\n\n        /**\n         * Add a `test` to this suite.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#addTest\n         */\n        addTest(test: Test): this;\n        /** @deprecated Use the overload that accepts `Mocha.ITest` instead. */\n        addTest(test: ITest): this;\n\n        /**\n         * Return the full title generated by recursively concatenating the parent's\n         * full title.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#.Suite#fullTitle\n         */\n        fullTitle(): string;\n\n        /**\n         * Return the title path generated by recursively concatenating the parent's\n         * title path.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#.Suite#titlePath\n         */\n        titlePath(): string[];\n\n        /**\n         * Return the total number of tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#.Suite#total\n         */\n        total(): number;\n\n        /**\n         * Iterates through each suite recursively to find all tests. Applies a\n         * function in the format `fn(test)`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#eachTest\n         */\n        eachTest(fn: (test: Test) => void): this;\n\n        /**\n         * This will run the root suite if we happen to be running in delayed mode.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#run\n         */\n        run(): void;\n\n        /**\n         * Generic hook-creator.\n         */\n        protected _createHook(title: string, fn?: Func | AsyncFunc): Hook;\n    }\n\n    // #region Suite \"beforeAll\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        once(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        addListener(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        emit(name: \"beforeAll\", hook: Hook): boolean;\n    }\n    // #endregion Suite \"beforeAll\" event\n    // #region Suite \"afterAll\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        once(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        addListener(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        emit(name: \"afterAll\", hook: Hook): boolean;\n    }\n    // #endregion Suite \"afterAll\" event\n    // #region Suite \"beforeEach\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        once(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        addListener(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        emit(name: \"beforeEach\", hook: Hook): boolean;\n    }\n    // #endregion Suite \"beforeEach\" event\n    // #region Suite \"afterEach\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        once(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        addListener(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        emit(name: \"afterEach\", hook: Hook): boolean;\n    }\n    // #endregion Suite \"afterEach\" event\n    // #region Suite \"suite\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"suite\", listener: (suite: Suite) => void): this;\n        once(event: \"suite\", listener: (suite: Suite) => void): this;\n        addListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        removeListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        prependListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        prependOnceListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        emit(name: \"suite\", suite: Suite): boolean;\n    }\n    // #endregion Suite \"suite\" event\n    // #region Suite \"test\" event\n    interface Suite {\n        on(event: \"test\", listener: (test: Test) => void): this;\n        once(event: \"test\", listener: (test: Test) => void): this;\n        addListener(event: \"test\", listener: (test: Test) => void): this;\n        removeListener(event: \"test\", listener: (test: Test) => void): this;\n        prependListener(event: \"test\", listener: (test: Test) => void): this;\n        prependOnceListener(event: \"test\", listener: (test: Test) => void): this;\n        emit(name: \"test\", test: Test): boolean;\n    }\n    // #endregion Suite \"test\" event\n    // #region Suite \"run\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"run\", listener: () => void): this;\n        once(event: \"run\", listener: () => void): this;\n        addListener(event: \"run\", listener: () => void): this;\n        removeListener(event: \"run\", listener: () => void): this;\n        prependListener(event: \"run\", listener: () => void): this;\n        prependOnceListener(event: \"run\", listener: () => void): this;\n        emit(name: \"run\"): boolean;\n    }\n    // #endregion Suite \"run\" event\n    // #region Suite \"pre-require\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        once(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        addListener(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        removeListener(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        prependListener(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        prependOnceListener(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        emit(name: \"pre-require\", context: MochaGlobals, file: string, mocha: Mocha): boolean;\n    }\n    // #endregion Suite \"pre-require\" event\n    // #region Suite \"require\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        once(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        addListener(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        removeListener(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        prependListener(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        prependOnceListener(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        emit(name: \"require\", module: any, file: string, mocha: Mocha): boolean;\n    }\n    // #endregion Suite \"require\" event\n    // #region Suite \"post-require\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        once(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        addListener(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        removeListener(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        prependListener(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        prependOnceListener(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        emit(name: \"post-require\", context: MochaGlobals, file: string, mocha: Mocha): boolean;\n    }\n    // #endregion Suite \"post-require\" event\n    // #region Suite untyped events\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: string, listener: (...args: any[]) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        removeListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        emit(name: string, ...args: any[]): boolean;\n    }\n    // #endregion Runner untyped events\n\n    /**\n     * Initialize a new `Hook` with the given `title` and callback `fn`\n     *\n     * @see https://mochajs.org/api/Hook.html\n     */\n    class Hook extends Runnable {\n        private _error;\n\n        type: \"hook\";\n        originalTitle?: string; // added by Runner\n\n        /**\n         * Get the test `err`.\n         *\n         * @see https://mochajs.org/api/Hook.html#error\n         */\n        error(): any;\n\n        /**\n         * Set the test `err`.\n         *\n         * @see https://mochajs.org/api/Hook.html#error\n         */\n        error(err: any): void;\n    }\n\n    /**\n     * Initialize a new `Test` with the given `title` and callback `fn`.\n     *\n     * @see https://mochajs.org/api/Test.html\n     */\n    class Test extends Runnable {\n        type: \"test\";\n        speed?: \"slow\" | \"medium\" | \"fast\"; // added by reporters\n        err?: Error; // added by reporters\n        clone(): Test;\n    }\n\n    /**\n     * Test statistics\n     */\n    interface Stats {\n        suites: number;\n        tests: number;\n        passes: number;\n        pending: number;\n        failures: number;\n        start?: Date;\n        end?: Date;\n        duration?: number;\n    }\n\n    type TestInterface = (suite: Suite) => void;\n\n    interface ReporterConstructor {\n        new (runner: Runner, options: { reporterOptions?: any; }): reporters.Base;\n    }\n\n    type Done = (err?: any) => void;\n\n    /**\n     * Callback function used for tests and hooks.\n     */\n    type Func = (this: Context, done: Done) => void;\n\n    /**\n     * Async callback function used for tests and hooks.\n     */\n    type AsyncFunc = (this: Context) => PromiseLike<any>;\n\n    /**\n     * Options to pass to Mocha.\n     */\n    interface MochaOptions {\n        /** Test interfaces (\"bdd\", \"tdd\", \"exports\", etc.). */\n        ui?: Interface;\n\n        /**\n         * Reporter constructor, built-in reporter name, or reporter module path. Defaults to\n         * `\"spec\"`.\n         */\n        reporter?: string | ReporterConstructor;\n\n        /** Options to pass to the reporter. */\n        reporterOptions?: any;\n\n        /** Array of accepted globals. */\n        globals?: string[];\n\n        /** timeout in milliseconds. */\n        timeout?: number;\n\n        enableTimeouts?: boolean;\n\n        /** number of times to retry failed tests. */\n        retries?: number;\n\n        /** bail on the first test failure. */\n        bail?: boolean;\n\n        /** milliseconds to wait before considering a test slow. */\n        slow?: number;\n\n        /** ignore global leaks. */\n        ignoreLeaks?: boolean;\n\n        /** display the full stack trace on failure. */\n        fullStackTrace?: boolean;\n\n        /** string or regexp to filter tests with. */\n        grep?: string | RegExp;\n\n        /** Enable growl support. */\n        growl?: boolean;\n\n        /** Emit color output. */\n        useColors?: boolean;\n\n        /** Use inline diffs rather than +/-. */\n        inlineDiffs?: boolean;\n\n        /** Do not show diffs at all. */\n        hideDiff?: boolean;\n\n        asyncOnly?: boolean;\n        delay?: boolean;\n        forbidOnly?: boolean;\n        forbidPending?: boolean;\n        noHighlighting?: boolean;\n        allowUncaught?: boolean;\n    }\n\n    interface MochaInstanceOptions extends MochaOptions {\n        files?: string[];\n    }\n\n    /**\n     * Variables added to the global scope by Mocha when run in the CLI.\n     */\n    interface MochaGlobals {\n        /**\n         * Execute before running tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#before\n         */\n        before: HookFunction;\n\n        /**\n         * Execute after running tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#after\n         */\n        after: HookFunction;\n\n        /**\n         * Execute before each test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#beforeEach\n         */\n        beforeEach: HookFunction;\n\n        /**\n         * Execute after each test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#afterEach\n         */\n        afterEach: HookFunction;\n\n        /**\n         * Describe a \"suite\" containing nested suites and tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        describe: SuiteFunction;\n\n        /**\n         * Describe a \"suite\" containing nested suites and tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        context: SuiteFunction;\n\n        /**\n         * Pending suite.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        xdescribe: PendingSuiteFunction;\n\n        /**\n         * Pending suite.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        xcontext: PendingSuiteFunction;\n\n        /**\n         * Describes a test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        it: TestFunction;\n\n        /**\n         * Describes a test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        specify: TestFunction;\n\n        /**\n         * Describes a pending test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        xit: PendingTestFunction;\n\n        /**\n         * Describes a pending test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        xspecify: PendingTestFunction;\n\n        /**\n         * Execute before running tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#before\n         */\n        suiteSetup: HookFunction;\n\n        /**\n         * Execute after running tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#after\n         */\n        suiteTeardown: HookFunction;\n\n        /**\n         * Execute before each test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#beforeEach\n         */\n        setup: HookFunction;\n\n        /**\n         * Execute after each test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#afterEach\n         */\n        teardown: HookFunction;\n\n        /**\n         * Describe a \"suite\" containing nested suites and tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        suite: SuiteFunction;\n\n        /**\n         * Describes a test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        test: TestFunction;\n\n        run: typeof run;\n    }\n\n    /**\n     * Third-party declarations that want to add new entries to the `Reporter` union can\n     * contribute names here.\n     */\n    interface ReporterContributions {\n        Base: never;\n        base: never;\n        Dot: never;\n        dot: never;\n        TAP: never;\n        tap: never;\n        JSON: never;\n        json: never;\n        HTML: never;\n        html: never;\n        List: never;\n        list: never;\n        Min: never;\n        min: never;\n        Spec: never;\n        spec: never;\n        Nyan: never;\n        nyan: never;\n        XUnit: never;\n        xunit: never;\n        Markdown: never;\n        markdown: never;\n        Progress: never;\n        progress: never;\n        Landing: never;\n        landing: never;\n        JSONStream: never;\n        \"json-stream\": never;\n    }\n\n    type Reporter = keyof ReporterContributions;\n\n    /**\n     * Third-party declarations that want to add new entries to the `Interface` union can\n     * contribute names here.\n     */\n    interface InterfaceContributions {\n        bdd: never;\n        tdd: never;\n        qunit: never;\n        exports: never;\n    }\n\n    type Interface = keyof InterfaceContributions;\n\n    // #region Deprecations\n\n    /** @deprecated use `Mocha.Context` instead. */\n    interface IContext {\n        test?: IRunnable;\n        runnable(): IRunnable | undefined;\n        /** @deprecated `.runnable()` returns `this` in `Mocha.Context`. */\n        runnable(runnable: IRunnable): IContext;\n        timeout(): number;\n        /** @deprecated `.timeout()` returns `this` in `Mocha.Context`. */\n        timeout(timeout: number): IContext;\n        /** @deprecated `.enableTimeouts()` has additional overloads in `Mocha.Context`. */\n        /** @deprecated `.enableTimeouts()` returns `this` in `Mocha.Context`. */\n        enableTimeouts(enableTimeouts: boolean): IContext;\n        /** @deprecated `.slow()` has additional overloads in `Mocha.Context`. */\n        /** @deprecated `.slow()` returns `this` in `Mocha.Context`. */\n        slow(slow: number): IContext;\n        /** @deprecated `.skip()` returns `never` in `Mocha.Context`. */\n        skip(): IContext;\n        retries(): number;\n        /** @deprecated `.retries()` returns `this` in `Mocha.Context`. */\n        retries(retries: number): IContext;\n    }\n\n    /** @deprecated use `Mocha.Suite` instead. */\n    interface ISuiteCallbackContext {\n        /** @deprecated `.timeout()` has additional overloads in `Mocha.Suite`. */\n        timeout(ms: number | string): this;\n        /** @deprecated `.retries()` has additional overloads in `Mocha.Suite`. */\n        retries(n: number): this;\n        /** @deprecated `.slow()` has additional overloads in `Mocha.Suite`. */\n        slow(ms: number): this;\n    }\n\n    /** @deprecated use `Mocha.Context` instead. */\n    interface IHookCallbackContext {\n        /** @deprecated `.skip()` returns `never` in `Mocha.Context`. */\n        skip(): this;\n        /** @deprecated `.timeout()` has additional overloads in `Mocha.Context`. */\n        timeout(ms: number | string): this;\n        [index: string]: any;\n    }\n\n    /** @deprecated use `Mocha.Context` instead. */\n    interface ITestCallbackContext {\n        /** @deprecated `.skip()` returns `never` in `Mocha.Context`. */\n        skip(): this;\n        /** @deprecated `.timeout()` has additional overloads in `Mocha.Context`. */\n        timeout(ms: number | string): this;\n        /** @deprecated `.retries()` has additional overloads in `Mocha.Context`. */\n        retries(n: number): this;\n        /** @deprecated `.slow()` has additional overloads in `Mocha.Context`. */\n        slow(ms: number): this;\n        [index: string]: any;\n    }\n\n    /** Partial interface for Mocha's `Runnable` class. */\n    /** @deprecated use `Mocha.Runnable` instead. */\n    interface IRunnable extends NodeJS.EventEmitter {\n        title: string;\n        /** @deprecated `.fn` has type `Func | AsyncFunc` in `Mocha.Runnable`. */\n        fn: Function | undefined;\n        async: boolean;\n        sync: boolean;\n        timedOut: boolean;\n        /** @deprecated `.timeout()` has additional overloads in `Mocha.Runnable`. */\n        timeout(n: number | string): this;\n        duration?: number;\n    }\n\n    /** Partial interface for Mocha's `Suite` class. */\n    /** @deprecated use `Mocha.Suite` instead. */\n    interface ISuite {\n        /** @deprecated `.ctx` has type `Mocha.Context` in `Mocha.Suite`. */\n        ctx: IContext;\n        /** @deprecated `.parent` has type `Mocha.Suite | undefined` in `Mocha.Suite`. */\n        parent: ISuite | undefined;\n        root: boolean;\n        title: string;\n        /** @deprecated `.suites` has type `Mocha.Suite[]` in `Mocha.Suite`. */\n        suites: ISuite[];\n        /** @deprecated `.tests` has type `Mocha.Test[]` in `Mocha.Suite`. */\n        tests: ITest[];\n\n        bail(): boolean;\n        /** @deprecated `.bail()` returns `this` in `Mocha.Suite`. */\n        bail(bail: boolean): ISuite;\n        fullTitle(): string;\n        retries(): number;\n        /** @deprecated `.retries()` returns `this` in `Mocha.Suite`. */\n        retries(retries: number): ISuite;\n        slow(): number;\n        /** @deprecated `.slow()` returns `this` in `Mocha.Suite`. */\n        slow(slow: number): ISuite;\n        timeout(): number;\n        /** @deprecated `.timeout()` returns `this` in `Mocha.Suite`. */\n        timeout(timeout: number): ISuite;\n    }\n\n    /** Partial interface for Mocha's `Test` class. */\n    /** @deprecated use `Mocha.Test` instead. */\n    interface ITest extends IRunnable {\n        body?: string;\n        file?: string;\n        /** @deprecated `.parent` has type `Mocha.Suite | undefined` in `Mocha.Test`. */\n        parent?: ISuite;\n        pending: boolean;\n        state?: 'failed' | 'passed';\n        type: 'test';\n        fullTitle(): string;\n    }\n\n    /** @deprecated use `Mocha.Hook` instead. */\n    interface IHook extends IRunnable {\n        /** @deprecated `.ctx` has type `Mocha.Context` in `Mocha.Runnable`. */\n        ctx?: IContext;\n        /** @deprecated `.parent` has type `Mocha.Suite` in `Mocha.Runnable`. */\n        parent?: ISuite;\n        type: 'hook';\n        /** @deprecated `.error()` has additional overloads in `Mocha.Hook`. */\n        error(err: Error): void;\n    }\n\n    /** @deprecated use `Mocha.Context` instead. */\n    interface IBeforeAndAfterContext extends IHookCallbackContext {\n        /** @deprecated `.currentTest` has type `Mocha.Test` in `Mocha.Context`. */\n        currentTest?: ITest;\n    }\n\n    /** @deprecated use `Mocha.Stats` instead. */\n    type IStats = Stats;\n\n    /** Partial interface for Mocha's `Runner` class. */\n    /** @deprecated use `Mocha.Runner` instead. */\n    interface IRunner extends NodeJS.EventEmitter {\n        asyncOnly?: boolean;\n        stats?: IStats;\n        started: boolean;\n        /** @deprecated `.suite` has type `Mocha.Suite` in `Mocha.Runner`. */\n        suite: ISuite;\n        total: number;\n        failures: number;\n        forbidOnly?: boolean;\n        forbidPending?: boolean;\n        fullStackTrace?: boolean;\n        ignoreLeaks?: boolean;\n        grep(re: RegExp, invert: boolean): this;\n        /** @deprecated Parameter `suite` has type `Mocha.Suite` in `Mocha.Runner`. */\n        grepTotal(suite: ISuite): number;\n        /** @deprecated `.globals()` has different overloads in `Mocha.Runner`. */\n        globals(arr: ReadonlyArray<string>): this | string[];\n        abort(): this;\n        run(fn?: (failures: number) => void): this;\n    }\n\n    /** @deprecated use `Mocha.SuiteFunction` instead. */\n    interface IContextDefinition {\n        /** @deprecated use `Mocha.SuiteFunction` instead. */\n        (description: string, callback: (this: ISuiteCallbackContext) => void): ISuite;\n        /** @deprecated use `Mocha.SuiteFunction` instead. */\n        only(description: string, callback: (this: ISuiteCallbackContext) => void): ISuite;\n        /** @deprecated use `Mocha.SuiteFunction` instead. */\n        skip(description: string, callback: (this: ISuiteCallbackContext) => void): void;\n    }\n\n    /** @deprecated use `Mocha.TestFunction` instead. */\n    interface ITestDefinition {\n        /** @deprecated use `Mocha.TestFunction` instead. */\n        /** @deprecated `Mocha.TestFunction` does not allow mixing `done` with a return type of `PromiseLike<any>`. */\n        (expectation: string, callback?: (this: ITestCallbackContext, done: MochaDone) => PromiseLike<any> | void): ITest;\n        /** @deprecated use `Mocha.TestFunction` instead. */\n        /** @deprecated `Mocha.TestFunction#only` does not allow mixing `done` with a return type of `PromiseLike<any>`. */\n        only(expectation: string, callback?: (this: ITestCallbackContext, done: MochaDone) => PromiseLike<any> | void): ITest;\n        /** @deprecated use `Mocha.TestFunction` instead. */\n        /** @deprecated `Mocha.TestFunction#skip` does not allow mixing `done` with a return type of `PromiseLike<any>`. */\n        skip(expectation: string, callback?: (this: ITestCallbackContext, done: MochaDone) => PromiseLike<any> | void): void;\n    }\n\n    // #endregion\n}\n\n// #region Test interface augmentations\n\n/**\n * Triggers root suite execution.\n *\n * - _Only available if flag --delay is passed into Mocha._\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#runWithSuite\n */\ndeclare function run(): void;\n\n/**\n * Execute before running tests.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#before\n */\ndeclare var before: Mocha.HookFunction;\n\n/**\n * Execute before running tests.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#before\n */\ndeclare var suiteSetup: Mocha.HookFunction;\n\n/**\n * Execute after running tests.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#after\n */\ndeclare var after: Mocha.HookFunction;\n\n/**\n * Execute after running tests.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#after\n */\ndeclare var suiteTeardown: Mocha.HookFunction;\n\n/**\n * Execute before each test case.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#beforeEach\n */\ndeclare var beforeEach: Mocha.HookFunction;\n\n/**\n * Execute before each test case.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#beforeEach\n */\ndeclare var setup: Mocha.HookFunction;\n\n/**\n * Execute after each test case.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#afterEach\n */\ndeclare var afterEach: Mocha.HookFunction;\n\n/**\n * Execute after each test case.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#afterEach\n */\ndeclare var teardown: Mocha.HookFunction;\n\n/**\n * Describe a \"suite\" containing nested suites and tests.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var describe: Mocha.SuiteFunction;\n\n/**\n * Describe a \"suite\" containing nested suites and tests.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var context: Mocha.SuiteFunction;\n\n/**\n * Describe a \"suite\" containing nested suites and tests.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var suite: Mocha.SuiteFunction;\n\n/**\n * Pending suite.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var xdescribe: Mocha.PendingSuiteFunction;\n\n/**\n * Pending suite.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var xcontext: Mocha.PendingSuiteFunction;\n\n/**\n * Describes a test case.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var it: Mocha.TestFunction;\n\n/**\n * Describes a test case.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var specify: Mocha.TestFunction;\n\n/**\n * Describes a test case.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var test: Mocha.TestFunction;\n\n/**\n * Describes a pending test case.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var xit: Mocha.PendingTestFunction;\n\n/**\n * Describes a pending test case.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var xspecify: Mocha.PendingTestFunction;\n\n// #endregion Test interface augmentations\n\n// #region Reporter augmentations\n\n// Forward declaration for `HTMLLIElement` from lib.dom.d.ts.\n// Required by Mocha.reporters.HTML.\n// NOTE: Mocha *must not* have a direct dependency on DOM types.\n// tslint:disable-next-line no-empty-interface\ninterface HTMLLIElement { }\n\n// Augments the DOM `Window` object when lib.dom.d.ts is loaded.\n// tslint:disable-next-line no-empty-interface\ninterface Window extends Mocha.MochaGlobals { }\n\ndeclare namespace NodeJS {\n    // Forward declaration for `NodeJS.EventEmitter` from node.d.ts.\n    // Required by Mocha.Runnable, Mocha.Runner, and Mocha.Suite.\n    // NOTE: Mocha *must not* have a direct dependency on @types/node.\n    // tslint:disable-next-line no-empty-interface\n    interface EventEmitter { }\n\n    // Augments NodeJS's `global` object when node.d.ts is loaded\n    // tslint:disable-next-line no-empty-interface\n    interface Global extends Mocha.MochaGlobals { }\n}\n\n// #endregion Reporter augmentations\n\n// #region Browser augmentations\n\n/**\n * Mocha global.\n *\n * - _Only supported in the browser._\n */\ndeclare const mocha: BrowserMocha;\n\ninterface BrowserMocha extends Mocha {\n    /**\n     * Function to allow assertion libraries to throw errors directly into mocha.\n     * This is useful when running tests in a browser because window.onerror will\n     * only receive the 'message' attribute of the Error.\n     *\n     * - _Only supported in the browser._\n     */\n    throwError(err: any): never;\n\n    /**\n     * Setup mocha with the given settings options.\n     *\n     * - _Only supported in the browser._\n     */\n    setup(opts?: Mocha.Interface | MochaSetupOptions): this;\n}\n\n/**\n * Options to pass to `mocha.setup` in the browser.\n */\ninterface MochaSetupOptions extends Mocha.MochaOptions {\n    /** @deprecated This is not used by Mocha. Use `files` instead. */\n    require?: string[];\n    fullTrace?: boolean;\n}\n\n// #endregion Browser augmentations\n\n// #region Deprecations\n\n/** @deprecated use `Mocha.Done` instead. */\ntype MochaDone = Mocha.Done;\n\n/** @deprecated use `Mocha.ReporterConstructor` instead. */\ntype ReporterConstructor = Mocha.ReporterConstructor;\n\n// #endregion Deprecations\n\ndeclare module \"mocha\" {\n    export = Mocha;\n}\n\ndeclare module \"mocha/lib/ms\" {\n    export = milliseconds;\n    /**\n     * Parse the given `str` and return milliseconds.\n     *\n     * @see {@link https://mochajs.org/api/module-milliseconds.html}\n     * @see {@link https://mochajs.org/api/module-milliseconds.html#~parse}\n     */\n    function milliseconds(val: string): number;\n\n    /**\n     * Format for `ms`.\n     *\n     * @see {@link https://mochajs.org/api/module-milliseconds.html}\n     * @see {@link https://mochajs.org/api/module-milliseconds.html#~format}\n     */\n    function milliseconds(val: number): string;\n}\n\ndeclare module \"mocha/lib/interfaces/common\" {\n    export = common;\n\n    function common(suites: Mocha.Suite[], context: Mocha.MochaGlobals, mocha: Mocha): common.CommonFunctions;\n\n    namespace common {\n        interface CommonFunctions {\n            /**\n             * This is only present if flag --delay is passed into Mocha. It triggers\n             * root suite execution.\n             */\n            runWithSuite(suite: Mocha.Suite): () => void;\n\n            /**\n             * Execute before running tests.\n             */\n            before(fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute before running tests.\n             */\n            before(name: string, fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute after running tests.\n             */\n            after(fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute after running tests.\n             */\n            after(name: string, fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute before each test case.\n             */\n            beforeEach(fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute before each test case.\n             */\n            beforeEach(name: string, fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute after each test case.\n             */\n            afterEach(fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute after each test case.\n             */\n            afterEach(name: string, fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            suite: SuiteFunctions;\n            test: TestFunctions;\n        }\n\n        interface CreateOptions {\n            /** Title of suite */\n            title: string;\n\n            /** Suite function */\n            fn?: (this: Mocha.Suite) => void;\n\n            /** Is suite pending? */\n            pending?: boolean;\n\n            /** Filepath where this Suite resides */\n            file?: string;\n\n            /** Is suite exclusive? */\n            isOnly?: boolean;\n        }\n\n        interface SuiteFunctions {\n            /**\n             * Create an exclusive Suite; convenience function\n             */\n            only(opts: CreateOptions): Mocha.Suite;\n\n            /**\n             * Create a Suite, but skip it; convenience function\n             */\n            skip(opts: CreateOptions): Mocha.Suite;\n\n            /**\n             * Creates a suite.\n             */\n            create(opts: CreateOptions): Mocha.Suite;\n        }\n\n        interface TestFunctions {\n            /**\n             * Exclusive test-case.\n             */\n            only(mocha: Mocha, test: Mocha.Test): Mocha.Test;\n\n            /**\n             * Pending test case.\n             */\n            skip(title: string): void;\n\n            /**\n             * Number of retry attempts\n             */\n            retries(n: number): void;\n        }\n    }\n}\n",
    "// Type definitions for chai 4.1\n// Project: http://chaijs.com/\n// Definitions by: Jed Mao <https://github.com/jedmao>,\n//                 Bart van der Schoor <https://github.com/Bartvds>,\n//                 Andrew Brown <https://github.com/AGBrown>,\n//                 Olivier Chevet <https://github.com/olivr70>,\n//                 Matt Wistrand <https://github.com/mwistrand>,\n//                 Josh Goldberg <https://github.com/joshuakgoldberg>\n//                 Shaun Luttin <https://github.com/shaunluttin>\n//                 Gintautas Miselis <https://github.com/Naktibalda>\n//                 Satana Charuwichitratana <https://github.com/micksatana>\n//                 Erik Schierboom <https://github.com/ErikSchierboom>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\ndeclare namespace Chai {\n    interface ChaiStatic {\n        expect: ExpectStatic;\n        should(): Should;\n        /**\n         * Provides a way to extend the internals of Chai\n         */\n        use(fn: (chai: any, utils: any) => void): ChaiStatic;\n        assert: AssertStatic;\n        config: Config;\n        AssertionError: typeof AssertionError;\n        version: string;\n    }\n\n    export interface ExpectStatic extends AssertionStatic {\n        fail(actual?: any, expected?: any, message?: string, operator?: Operator): void;\n    }\n\n    export interface AssertStatic extends Assert {\n    }\n\n    export interface AssertionStatic {\n        (target: any, message?: string): Assertion;\n    }\n\n    export type Operator = string; // \"==\" | \"===\" | \">\" | \">=\" | \"<\" | \"<=\" | \"!=\" | \"!==\";\n\n    export type OperatorComparable = boolean | null | number | string | undefined | Date;\n\n    interface ShouldAssertion {\n        equal(value1: any, value2: any, message?: string): void;\n        Throw: ShouldThrow;\n        throw: ShouldThrow;\n        exist(value: any, message?: string): void;\n    }\n\n    interface Should extends ShouldAssertion {\n        not: ShouldAssertion;\n        fail(actual: any, expected: any, message?: string, operator?: Operator): void;\n    }\n\n    interface ShouldThrow {\n        (actual: Function, expected?: string|RegExp, message?: string): void;\n        (actual: Function, constructor: Error|Function, expected?: string|RegExp, message?: string): void;\n    }\n\n    interface Assertion extends LanguageChains, NumericComparison, TypeComparison {\n        not: Assertion;\n        deep: Deep;\n        ordered: Ordered;\n        nested: Nested;\n        any: KeyFilter;\n        all: KeyFilter;\n        a: TypeComparison;\n        an: TypeComparison;\n        include: Include;\n        includes: Include;\n        contain: Include;\n        contains: Include;\n        ok: Assertion;\n        true: Assertion;\n        false: Assertion;\n        null: Assertion;\n        undefined: Assertion;\n        NaN: Assertion;\n        exist: Assertion;\n        empty: Assertion;\n        arguments: Assertion;\n        Arguments: Assertion;\n        equal: Equal;\n        equals: Equal;\n        eq: Equal;\n        eql: Equal;\n        eqls: Equal;\n        property: Property;\n        ownProperty: OwnProperty;\n        haveOwnProperty: OwnProperty;\n        ownPropertyDescriptor: OwnPropertyDescriptor;\n        haveOwnPropertyDescriptor: OwnPropertyDescriptor;\n        length: Length;\n        lengthOf: Length;\n        match: Match;\n        matches: Match;\n        string(string: string, message?: string): Assertion;\n        keys: Keys;\n        key(string: string): Assertion;\n        throw: Throw;\n        throws: Throw;\n        Throw: Throw;\n        respondTo: RespondTo;\n        respondsTo: RespondTo;\n        itself: Assertion;\n        satisfy: Satisfy;\n        satisfies: Satisfy;\n        closeTo: CloseTo;\n        approximately: CloseTo;\n        members: Members;\n        increase: PropertyChange;\n        increases: PropertyChange;\n        decrease: PropertyChange;\n        decreases: PropertyChange;\n        change: PropertyChange;\n        changes: PropertyChange;\n        extensible: Assertion;\n        sealed: Assertion;\n        frozen: Assertion;\n        oneOf(list: ReadonlyArray<any>, message?: string): Assertion;\n    }\n\n    interface LanguageChains {\n        to: Assertion;\n        be: Assertion;\n        been: Assertion;\n        is: Assertion;\n        that: Assertion;\n        which: Assertion;\n        and: Assertion;\n        has: Assertion;\n        have: Assertion;\n        with: Assertion;\n        at: Assertion;\n        of: Assertion;\n        same: Assertion;\n        but: Assertion;\n        does: Assertion;\n    }\n\n    interface NumericComparison {\n        above: NumberComparer;\n        gt: NumberComparer;\n        greaterThan: NumberComparer;\n        least: NumberComparer;\n        gte: NumberComparer;\n        below: NumberComparer;\n        lt: NumberComparer;\n        lessThan: NumberComparer;\n        most: NumberComparer;\n        lte: NumberComparer;\n        within(start: number, finish: number, message?: string): Assertion;\n        within(start: Date, finish: Date, message?: string): Assertion;\n    }\n\n    interface NumberComparer {\n        (value: number | Date, message?: string): Assertion;\n    }\n\n    interface TypeComparison {\n        (type: string, message?: string): Assertion;\n        instanceof: InstanceOf;\n        instanceOf: InstanceOf;\n    }\n\n    interface InstanceOf {\n        (constructor: Object, message?: string): Assertion;\n    }\n\n    interface CloseTo {\n        (expected: number, delta: number, message?: string): Assertion;\n    }\n\n    interface Nested {\n      include: Include;\n      property: Property;\n      members: Members;\n    }\n\n    interface Deep {\n        equal: Equal;\n        equals: Equal;\n        eq: Equal;\n        include: Include;\n        property: Property;\n        members: Members;\n        ordered: Ordered;\n        nested: Nested;\n    }\n\n    interface Ordered {\n        members: Members;\n    }\n\n    interface KeyFilter {\n        keys: Keys;\n        members: Members;\n    }\n\n    interface Equal {\n        (value: any, message?: string): Assertion;\n    }\n\n    interface Property {\n        (name: string, value?: any, message?: string): Assertion;\n    }\n\n    interface OwnProperty {\n        (name: string, message?: string): Assertion;\n    }\n\n    interface OwnPropertyDescriptor {\n        (name: string, descriptor: PropertyDescriptor, message?: string): Assertion;\n        (name: string, message?: string): Assertion;\n    }\n\n    interface Length extends LanguageChains, NumericComparison {\n        (length: number, message?: string): Assertion;\n    }\n\n    interface Include {\n        (value: Object | string | number, message?: string): Assertion;\n        keys: Keys;\n        deep: Deep;\n        ordered: Ordered;\n        members: Members;\n        any: KeyFilter;\n        all: KeyFilter;\n    }\n\n    interface Match {\n        (regexp: RegExp, message?: string): Assertion;\n    }\n\n    interface Keys {\n        (...keys: string[]): Assertion;\n        (keys: ReadonlyArray<any>|Object): Assertion;\n    }\n\n    interface Throw {\n        (expected?: string|RegExp, message?: string): Assertion;\n        (constructor: Error|Function, expected?: string|RegExp, message?: string): Assertion;\n    }\n\n    interface RespondTo {\n        (method: string, message?: string): Assertion;\n    }\n\n    interface Satisfy {\n        (matcher: Function, message?: string): Assertion;\n    }\n\n    interface Members {\n        (set: ReadonlyArray<any>, message?: string): Assertion;\n    }\n\n    interface PropertyChange {\n        (object: Object, property: string, message?: string): Assertion;\n    }\n\n    export interface Assert {\n        /**\n         * @param expression    Expression to test for truthiness.\n         * @param message    Message to display on error.\n         */\n        (expression: any, message?: string): void;\n\n        /**\n         * Throws a failure.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message    Message to display on error.\n         * @param operator   Comparison operator, if not strict equality.\n         * @remarks Node.js assert module-compatible.\n         */\n        fail<T>(actual?: T, expected?: T, message?: string, operator?: Operator): void;\n\n        /**\n         * Asserts that object is truthy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        isOk<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that object is truthy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        ok<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that object is falsy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        isNotOk<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that object is falsy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        notOk<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts non-strict equality (==) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        equal<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts non-strict inequality (==) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        notEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts strict equality (===) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        strictEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts strict inequality (==) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        notStrictEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts that actual is deeply equal (==) to expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        deepEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts that actual is not deeply equal (==) to expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        notDeepEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts that actual is deeply strict equal (===) to expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        deepStrictEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is strictly greater than (>) valueToBeAbove.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeAbove   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isAbove(valueToCheck: number, valueToBeAbove: number, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is greater than or equal to (>=) valueToBeAtLeast.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeAtLeast   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isAtLeast(valueToCheck: number, valueToBeAtLeast: number, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is strictly less than (<) valueToBeBelow.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeBelow   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isBelow(valueToCheck: number, valueToBeBelow: number, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is greater than or equal to (>=) valueToBeAtMost.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeAtMost   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isAtMost(valueToCheck: number, valueToBeAtMost: number, message?: string): void;\n\n        /**\n         * Asserts that value is true.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isTrue<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is false.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isFalse<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not true.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotTrue<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not false.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotFalse<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is null.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNull<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not null.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotNull<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not null.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNaN<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not null.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotNaN<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that the target is neither null nor undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message    Message to display on error.\n         */\n        exists<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that the target is either null or undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message    Message to display on error.\n         */\n        notExists<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isUndefined<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isDefined<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a function.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isFunction<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a function.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotFunction<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is an object of type 'Object'\n         * (as revealed by Object.prototype.toString).\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         * @remarks The assertion does not match subclassed objects.\n         */\n        isObject<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not an object of type 'Object'\n         * (as revealed by Object.prototype.toString).\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotObject<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is an array.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isArray<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not an array.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotArray<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a string.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isString<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a string.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotString<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a number.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNumber<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a number.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotNumber<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a boolean.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isBoolean<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a boolean.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotBoolean<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value's type is name, as determined by Object.prototype.toString.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param name   Potential expected type name of value.\n         * @param message   Message to display on error.\n         */\n        typeOf<T>(value: T, name: string, message?: string): void;\n\n        /**\n         * Asserts that value's type is not name, as determined by Object.prototype.toString.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param name   Potential expected type name of value.\n         * @param message   Message to display on error.\n         */\n        notTypeOf<T>(value: T, name: string, message?: string): void;\n\n        /**\n         * Asserts that value is an instance of constructor.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param constructor   Potential expected contructor of value.\n         * @param message   Message to display on error.\n         */\n        instanceOf<T>(value: T, constructor: Function, message?: string): void;\n\n        /**\n         * Asserts that value is not an instance of constructor.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param constructor   Potential expected contructor of value.\n         * @param message   Message to display on error.\n         */\n        notInstanceOf<T>(value: T, type: Function, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle.\n         *\n         * @param haystack   Container string.\n         * @param needle   Potential expected substring of haystack.\n         * @param message   Message to display on error.\n         */\n        include(haystack: string, needle: string, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   Container array.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        include<T>(haystack: ReadonlyArray<T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack does not include needle.\n         *\n         * @param haystack   Container string or array.\n         * @param needle   Potential expected substring of haystack.\n         * @param message   Message to display on error.\n         */\n        notInclude(haystack: string | ReadonlyArray<any>, needle: any, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle. Can be used to assert the inclusion of a value in an array or a subset of properties in an object. Deep equality is used.\n         *\n         * @param haystack   Container string.\n         * @param needle   Potential expected substring of haystack.\n         * @param message   Message to display on error.\n         */\n        deepInclude(haystack: string, needle: string, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle. Can be used to assert the inclusion of a value in an array or a subset of properties in an object. Deep equality is used.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        deepInclude<T>(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that haystack does not include needle. Can be used to assert the absence of a value in an array or a subset of properties in an object. Deep equality is used.\n         *\n         * @param haystack   Container string or array.\n         * @param needle   Potential expected substring of haystack.\n         * @param message   Message to display on error.\n         */\n        notDeepInclude(haystack: string | ReadonlyArray<any>, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object.\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        nestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ does not include ‘needle’. Can be used to assert the absence of a subset of properties in an object.\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notNestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while checking for deep equality\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        deepNestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ does not include ‘needle’. Can be used to assert the absence of a subset of properties in an object while checking for deep equality.\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notDeepNestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        ownInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notOwnInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties and checking for deep\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        deepOwnInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties and checking for deep equality.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notDeepOwnInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that value matches the regular expression regexp.\n         *\n         * @param value   Actual value.\n         * @param regexp   Potential match of value.\n         * @param message   Message to display on error.\n         */\n        match(value: string, regexp: RegExp, message?: string): void;\n\n        /**\n         * Asserts that value does not match the regular expression regexp.\n         *\n         * @param value   Actual value.\n         * @param regexp   Potential match of value.\n         * @param message   Message to display on error.\n         */\n        notMatch(expected: any, regexp: RegExp, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        property<T>(object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        notProperty<T>(object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property, which can be a string\n         * using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        deepProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property, which can be a\n         * string using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        notDeepProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with value given by value.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        propertyVal<T, V>(object: T, property: string /* keyof T */, value: V, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with value given by value.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        propertyNotVal<T, V>(object: T, property: string /* keyof T */, value: V, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property, which can be a string\n         * using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        deepPropertyVal<T, V>(object: T, property: string, value: V, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property, which can be a\n         * string using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        deepPropertyNotVal<T, V>(object: T, property: string, value: V, message?: string): void;\n\n        /**\n         * Asserts that object has a length property with the expected value.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param length   Potential expected length of object.\n         * @param message   Message to display on error.\n         */\n        lengthOf<T extends { readonly length?: number }>(object: T, length: number, message?: string): void;\n\n        /**\n         * Asserts that fn will throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        throw(fn: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param regExp   Potential expected message match.\n         * @param message   Message to display on error.\n         */\n        throw(fn: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        throw(fn: Function, constructor: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        throw(fn: Function, constructor: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that fn will throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        throws(fn: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param errType  Potential expected message match or error constructor.\n         * @param message   Message to display on error.\n         */\n        throws(fn: Function, errType: RegExp|Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        throws(fn: Function, errType: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that fn will throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param regExp   Potential expected message match.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: Function, errType: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: Function, errType: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that fn will not throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param regExp   Potential expected message match.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: Function, errType: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: Function, errType: Function, regExp: RegExp): void;\n\n        /**\n         * Compares two values using operator.\n         *\n         * @param val1   Left value during comparison.\n         * @param operator   Comparison operator.\n         * @param val2   Right value during comparison.\n         * @param message   Message to display on error.\n         */\n        operator(val1: OperatorComparable, operator: Operator, val2: OperatorComparable, message?: string): void;\n\n        /**\n         * Asserts that the target is equal to expected, to within a +/- delta range.\n         *\n         * @param actual   Actual value\n         * @param expected   Potential expected value.\n         * @param delta   Maximum differenced between values.\n         * @param message   Message to display on error.\n         */\n        closeTo(actual: number, expected: number, delta: number, message?: string): void;\n\n        /**\n         * Asserts that the target is equal to expected, to within a +/- delta range.\n         *\n         * @param actual   Actual value\n         * @param expected   Potential expected value.\n         * @param delta   Maximum differenced between values.\n         * @param message   Message to display on error.\n         */\n        approximately(act: number, exp: number, delta: number, message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members. Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members using deep equality checking.\n         * Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameDeepMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members in the same order.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 don’t have the same members in the same order.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        notSameOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members in the same order.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameDeepOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 don’t have the same members in the same order.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        notSameDeepOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset in the same order beginning with the first element in superset.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset isn’t included in superset in the same order beginning with the first element in superset.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        notIncludeOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset in the same order beginning with the first element in superset.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeDeepOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset isn’t included in superset in the same order beginning with the first element in superset.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        notIncludeDeepOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset. Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset using deep equality checking.\n         * Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeDeepMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that non-object, non-array value inList appears in the flat array list.\n         *\n         * @type T   Type of list values.\n         * @param inList   Value expected to be in the list.\n         * @param list   List of values.\n         * @param message   Message to display on error.\n         */\n        oneOf<T>(inList: T, list: T[], message?: string): void;\n\n        /**\n         * Asserts that a function changes the value of a property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected to be modified.\n         * @param message   Message to display on error.\n         */\n        changes<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function does not change the value of a property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected not to be modified.\n         * @param message   Message to display on error.\n         */\n        doesNotChange<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function increases an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected to be increased.\n         * @param message   Message to display on error.\n         */\n        increases<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function does not increase an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected not to be increased.\n         * @param message   Message to display on error.\n         */\n        doesNotIncrease<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function decreases an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected to be decreased.\n         * @param message   Message to display on error.\n         */\n        decreases<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function does not decrease an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected not to be decreased.\n         * @param message   Message to display on error.\n         */\n        doesNotDecrease<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts if value is not a false value, and throws if it is a true value.\n         *\n         * @type T   Type of object.\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         * @remarks This is added to allow for chai to be a drop-in replacement for\n         *          Node’s assert class.\n         */\n        ifError<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is extensible (can have new properties added to it).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isExtensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is extensible (can have new properties added to it).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        extensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not extensible.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotExtensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not extensible.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        notExtensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is sealed (can have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isSealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is sealed (can have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        sealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not sealed.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotSealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not sealed.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        notSealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isFrozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        frozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotFrozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        notFrozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that the target does not contain any values. For arrays and\n         * strings, it checks the length property. For Map and Set instances, it\n         * checks the size property. For non-function objects, it gets the count\n         * of own enumerable string keys.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isEmpty<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that the target contains values. For arrays and strings, it checks\n         * the length property. For Map and Set instances, it checks the size property.\n         * For non-function objects, it gets the count of own enumerable string keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        isNotEmpty<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that `object` has at least one of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAnyKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has all and only all of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAllKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        containsAllKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has none of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAnyKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` does not have at least one of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAllKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has at least one of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAnyDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has all and only all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAllDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` contains all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        containsAllDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` contains all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAnyDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` contains all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAllDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that object has a direct or inherited property named by property,\n         * which can be a string using dot- and bracket-notation for nested reference.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param message    Message to display on error.\n         */\n        nestedProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property,\n         * which can be a string using dot- and bracket-notation for nested reference.\n         * The property cannot exist on the object nor anywhere in its prototype chain.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param message    Message to display on error.\n         */\n        notNestedProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        nestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property with value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        notNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with a value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a deep equality check.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        deepNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property with value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a deep equality check.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        notDeepNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n    }\n\n    export interface Config {\n        /**\n         * Default: false\n         */\n        includeStack: boolean;\n\n        /**\n         * Default: true\n         */\n        showDiff: boolean;\n\n        /**\n         * Default: 40\n         */\n        truncateThreshold: number;\n    }\n\n    export class AssertionError {\n        constructor(message: string, _props?: any, ssf?: Function);\n        name: string;\n        message: string;\n        showDiff: boolean;\n        stack: string;\n    }\n}\n\ndeclare const chai: Chai.ChaiStatic;\n\ndeclare module \"chai\" {\n    export = chai;\n}\n\ninterface Object {\n    should: Chai.Assertion;\n}\n",
    "// Type definitions for chai-as-promised 7.1.0\n// Project: https://github.com/domenic/chai-as-promised/\n// Definitions by: jt000 <https://github.com/jt000>,\n//                 Yuki Kokubun <https://github.com/Kuniwak>,\n//                 Leonard Thieu <https://github.com/leonard-thieu>,\n//                 Mike Lazer-Walker <https://github.com/lazerwalker>,\n//                 Matt Bishop <https://github.com/mattbishop>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\n/// <reference types=\"chai\" />\n\ndeclare module 'chai-as-promised' {\n    function chaiAsPromised(chai: any, utils: any): void;\n\n    namespace chaiAsPromised {\n        function transferPromiseness(assertion: Chai.PromisedAssertion, promise: PromiseLike<any>): void;\n\n        function transformAsserterArgs(values: any[]): any;\n    }\n\n    export = chaiAsPromised;\n}\n\ndeclare namespace Chai {\n\n    // For BDD API\n    interface Assertion extends LanguageChains, NumericComparison, TypeComparison {\n        eventually: PromisedAssertion;\n        become(expected: any): PromisedAssertion;\n        fulfilled: PromisedAssertion;\n        rejected: PromisedAssertion;\n        rejectedWith: PromisedThrow;\n        notify(fn: Function): PromisedAssertion;\n    }\n\n    // Eventually does not have .then(), but PromisedAssertion have.\n    interface Eventually extends PromisedLanguageChains, PromisedNumericComparison, PromisedTypeComparison {\n        // From chai-as-promised\n        become(expected: any): PromisedAssertion;\n        fulfilled: PromisedAssertion;\n        rejected: PromisedAssertion;\n        rejectedWith: PromisedThrow;\n        notify(fn: Function): PromisedAssertion;\n\n        // From chai\n        not: PromisedAssertion;\n        deep: PromisedDeep;\n        ordered: PromisedOrdered;\n        nested: PromisedNested;\n        any: PromisedKeyFilter;\n        all: PromisedKeyFilter;\n        a: PromisedTypeComparison;\n        an: PromisedTypeComparison;\n        include: PromisedInclude;\n        contain: PromisedInclude;\n        ok: PromisedAssertion;\n        true: PromisedAssertion;\n        false: PromisedAssertion;\n        null: PromisedAssertion;\n        undefined: PromisedAssertion;\n        NaN: PromisedAssertion;\n        exist: PromisedAssertion;\n        empty: PromisedAssertion;\n        arguments: PromisedAssertion;\n        Arguments: PromisedAssertion;\n        equal: PromisedEqual;\n        equals: PromisedEqual;\n        eq: PromisedEqual;\n        eql: PromisedEqual;\n        eqls: PromisedEqual;\n        property: PromisedProperty;\n        ownProperty: PromisedOwnProperty;\n        haveOwnProperty: PromisedOwnProperty;\n        ownPropertyDescriptor: PromisedOwnPropertyDescriptor;\n        haveOwnPropertyDescriptor: PromisedOwnPropertyDescriptor;\n        length: PromisedLength;\n        lengthOf: PromisedLength;\n        match: PromisedMatch;\n        matches: PromisedMatch;\n        string(string: string, message?: string): PromisedAssertion;\n        keys: PromisedKeys;\n        key(string: string): PromisedAssertion;\n        throw: PromisedThrow;\n        throws: PromisedThrow;\n        Throw: PromisedThrow;\n        respondTo: PromisedRespondTo;\n        respondsTo: PromisedRespondTo;\n        itself: PromisedAssertion;\n        satisfy: PromisedSatisfy;\n        satisfies: PromisedSatisfy;\n        closeTo: PromisedCloseTo;\n        approximately: PromisedCloseTo;\n        members: PromisedMembers;\n        increase: PromisedPropertyChange;\n        increases: PromisedPropertyChange;\n        decrease: PromisedPropertyChange;\n        decreases: PromisedPropertyChange;\n        change: PromisedPropertyChange;\n        changes: PromisedPropertyChange;\n        extensible: PromisedAssertion;\n        sealed: PromisedAssertion;\n        frozen: PromisedAssertion;\n        oneOf(list: any[], message?: string): PromisedAssertion;\n    }\n\n    interface PromisedAssertion extends Eventually, PromiseLike<any> {\n    }\n\n    interface PromisedLanguageChains {\n        eventually: Eventually;\n\n        // From chai\n        to: PromisedAssertion;\n        be: PromisedAssertion;\n        been: PromisedAssertion;\n        is: PromisedAssertion;\n        that: PromisedAssertion;\n        which: PromisedAssertion;\n        and: PromisedAssertion;\n        has: PromisedAssertion;\n        have: PromisedAssertion;\n        with: PromisedAssertion;\n        at: PromisedAssertion;\n        of: PromisedAssertion;\n        same: PromisedAssertion;\n        but: PromisedAssertion;\n        does: PromisedAssertion;\n    }\n\n    interface PromisedNumericComparison {\n        above: PromisedNumberComparer;\n        gt: PromisedNumberComparer;\n        greaterThan: PromisedNumberComparer;\n        least: PromisedNumberComparer;\n        gte: PromisedNumberComparer;\n        below: PromisedNumberComparer;\n        lt: PromisedNumberComparer;\n        lessThan: PromisedNumberComparer;\n        most: PromisedNumberComparer;\n        lte: PromisedNumberComparer;\n        within(start: number, finish: number, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedNumberComparer {\n        (value: number, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedTypeComparison {\n        (type: string, message?: string): PromisedAssertion;\n        instanceof: PromisedInstanceOf;\n        instanceOf: PromisedInstanceOf;\n    }\n\n    interface PromisedInstanceOf {\n        (constructor: Object, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedCloseTo {\n        (expected: number, delta: number, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedNested {\n        include: PromisedInclude;\n        property: PromisedProperty;\n        members: PromisedMembers;\n    }\n\n    interface PromisedDeep {\n        equal: PromisedEqual;\n        equals: PromisedEqual;\n        eq: PromisedEqual;\n        include: PromisedInclude;\n        property: PromisedProperty;\n        members: PromisedMembers;\n        ordered: PromisedOrdered\n    }\n\n    interface PromisedOrdered {\n        members: PromisedMembers;\n    }\n\n    interface PromisedKeyFilter {\n        keys: PromisedKeys;\n    }\n\n    interface PromisedEqual {\n        (value: any, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedProperty {\n        (name: string, value?: any, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedOwnProperty {\n        (name: string, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedOwnPropertyDescriptor {\n        (name: string, descriptor: PropertyDescriptor, message?: string): PromisedAssertion;\n        (name: string, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedLength extends PromisedLanguageChains, PromisedNumericComparison {\n        (length: number, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedInclude {\n        (value: Object, message?: string): PromisedAssertion;\n        (value: string, message?: string): PromisedAssertion;\n        (value: number, message?: string): PromisedAssertion;\n        keys: PromisedKeys;\n        deep: PromisedDeep;\n        ordered: PromisedOrdered;\n        members: PromisedMembers;\n        any: PromisedKeyFilter;\n        all: PromisedKeyFilter;\n    }\n\n    interface PromisedMatch {\n        (regexp: RegExp | string, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedKeys {\n        (...keys: string[]): PromisedAssertion;\n        (keys: any[]): PromisedAssertion;\n        (keys: Object): PromisedAssertion;\n    }\n\n    interface PromisedThrow {\n        (): PromisedAssertion;\n        (expected: string, message?: string): PromisedAssertion;\n        (expected: RegExp, message?: string): PromisedAssertion;\n        (constructor: Error, expected?: string, message?: string): PromisedAssertion;\n        (constructor: Error, expected?: RegExp, message?: string): PromisedAssertion;\n        (constructor: Function, expected?: string, message?: string): PromisedAssertion;\n        (constructor: Function, expected?: RegExp, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedRespondTo {\n        (method: string, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedSatisfy {\n        (matcher: Function, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedMembers {\n        (set: any[], message?: string): PromisedAssertion;\n    }\n\n    interface PromisedPropertyChange {\n        (object: Object, property: string, message?: string): PromisedAssertion;\n    }\n\n    // For Assert API\n    interface Assert {\n        eventually: PromisedAssert;\n        isFulfilled(promise: PromiseLike<any>, message?: string): PromiseLike<void>;\n        becomes(promise: PromiseLike<any>, expected: any, message?: string): PromiseLike<void>;\n        doesNotBecome(promise: PromiseLike<any>, expected: any, message?: string): PromiseLike<void>;\n        isRejected(promise: PromiseLike<any>, message?: string): PromiseLike<void>;\n        isRejected(promise: PromiseLike<any>, expected: any, message?: string): PromiseLike<void>;\n        isRejected(promise: PromiseLike<any>, match: RegExp, message?: string): PromiseLike<void>;\n        notify(fn: Function): PromiseLike<void>;\n    }\n\n    export interface PromisedAssert {\n        fail(actual?: any, expected?: any, msg?: string, operator?: string): PromiseLike<void>;\n\n        isOk(val: any, msg?: string): PromiseLike<void>;\n        ok(val: any, msg?: string): PromiseLike<void>;\n        isNotOk(val: any, msg?: string): PromiseLike<void>;\n        notOk(val: any, msg?: string): PromiseLike<void>;\n\n        equal(act: any, exp: any, msg?: string): PromiseLike<void>;\n        notEqual(act: any, exp: any, msg?: string): PromiseLike<void>;\n\n        strictEqual(act: any, exp: any, msg?: string): PromiseLike<void>;\n        notStrictEqual(act: any, exp: any, msg?: string): PromiseLike<void>;\n\n        deepEqual(act: any, exp: any, msg?: string): PromiseLike<void>;\n        notDeepEqual(act: any, exp: any, msg?: string): PromiseLike<void>;\n\n        isAbove(val: number, above: number, msg?: string): PromiseLike<void>;\n        isAtLeast(val: number, atLeast: number, msg?: string): PromiseLike<void>;\n        isAtBelow(val: number, below: number, msg?: string): PromiseLike<void>;\n        isAtMost(val: number, atMost: number, msg?: string): PromiseLike<void>;\n\n        isTrue(val: any, msg?: string): PromiseLike<void>;\n        isFalse(val: any, msg?: string): PromiseLike<void>;\n\n        isNotTrue(val: any, msg?: string): PromiseLike<void>;\n        isNotFalse(val: any, msg?: string): PromiseLike<void>;\n\n        isNull(val: any, msg?: string): PromiseLike<void>;\n        isNotNull(val: any, msg?: string): PromiseLike<void>;\n\n        isNaN(val: any, msg?: string): PromiseLike<void>;\n        isNotNaN(val: any, msg?: string): PromiseLike<void>;\n\n        exists(val: any, msg?: string): PromiseLike<void>;\n        notExists(val: any, msg?: string): PromiseLike<void>;\n\n        isUndefined(val: any, msg?: string): PromiseLike<void>;\n        isDefined(val: any, msg?: string): PromiseLike<void>;\n\n        isFunction(val: any, msg?: string): PromiseLike<void>;\n        isNotFunction(val: any, msg?: string): PromiseLike<void>;\n\n        isObject(val: any, msg?: string): PromiseLike<void>;\n        isNotObject(val: any, msg?: string): PromiseLike<void>;\n\n        isArray(val: any, msg?: string): PromiseLike<void>;\n        isNotArray(val: any, msg?: string): PromiseLike<void>;\n\n        isString(val: any, msg?: string): PromiseLike<void>;\n        isNotString(val: any, msg?: string): PromiseLike<void>;\n\n        isNumber(val: any, msg?: string): PromiseLike<void>;\n        isNotNumber(val: any, msg?: string): PromiseLike<void>;\n\n        isBoolean(val: any, msg?: string): PromiseLike<void>;\n        isNotBoolean(val: any, msg?: string): PromiseLike<void>;\n\n        typeOf(val: any, type: string, msg?: string): PromiseLike<void>;\n        notTypeOf(val: any, type: string, msg?: string): PromiseLike<void>;\n\n        instanceOf(val: any, type: Function, msg?: string): PromiseLike<void>;\n        notInstanceOf(val: any, type: Function, msg?: string): PromiseLike<void>;\n\n        include(exp: string, inc: any, msg?: string): PromiseLike<void>;\n        include(exp: any[], inc: any, msg?: string): PromiseLike<void>;\n\n        notInclude(exp: string, inc: any, msg?: string): PromiseLike<void>;\n        notInclude(exp: any[], inc: any, msg?: string): PromiseLike<void>;\n\n        match(exp: any, re: RegExp, msg?: string): PromiseLike<void>;\n        notMatch(exp: any, re: RegExp, msg?: string): PromiseLike<void>;\n\n        property(obj: Object, prop: string, msg?: string): PromiseLike<void>;\n        notProperty(obj: Object, prop: string, msg?: string): PromiseLike<void>;\n        deepProperty(obj: Object, prop: string, msg?: string): PromiseLike<void>;\n        notDeepProperty(obj: Object, prop: string, msg?: string): PromiseLike<void>;\n\n        propertyVal(obj: Object, prop: string, val: any, msg?: string): PromiseLike<void>;\n        propertyNotVal(obj: Object, prop: string, val: any, msg?: string): PromiseLike<void>;\n\n        deepPropertyVal(obj: Object, prop: string, val: any, msg?: string): PromiseLike<void>;\n        deepPropertyNotVal(obj: Object, prop: string, val: any, msg?: string): PromiseLike<void>;\n\n        lengthOf(exp: any, len: number, msg?: string): PromiseLike<void>;\n        //alias frenzy\n        throw(fn: Function, msg?: string): PromiseLike<void>;\n        throw(fn: Function, regExp: RegExp): PromiseLike<void>;\n        throw(fn: Function, errType: Function, msg?: string): PromiseLike<void>;\n        throw(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;\n\n        throws(fn: Function, msg?: string): PromiseLike<void>;\n        throws(fn: Function, regExp: RegExp): PromiseLike<void>;\n        throws(fn: Function, errType: Function, msg?: string): PromiseLike<void>;\n        throws(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;\n\n        Throw(fn: Function, msg?: string): PromiseLike<void>;\n        Throw(fn: Function, regExp: RegExp): PromiseLike<void>;\n        Throw(fn: Function, errType: Function, msg?: string): PromiseLike<void>;\n        Throw(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;\n\n        doesNotThrow(fn: Function, msg?: string): PromiseLike<void>;\n        doesNotThrow(fn: Function, regExp: RegExp): PromiseLike<void>;\n        doesNotThrow(fn: Function, errType: Function, msg?: string): PromiseLike<void>;\n        doesNotThrow(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;\n\n        operator(val: any, operator: string, val2: any, msg?: string): PromiseLike<void>;\n        closeTo(act: number, exp: number, delta: number, msg?: string): PromiseLike<void>;\n        approximately(act: number, exp: number, delta: number, msg?: string): PromiseLike<void>;\n\n        sameMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        sameDeepMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        sameOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        notSameOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        sameDeepOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        notSameDeepOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        includeOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        notIncludeOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        includeDeepOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        notIncludeDeepOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        includeMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        includeDeepMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n\n        oneOf(val: any, list: any[], msg?: string): PromiseLike<void>;\n\n        changes(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n        doesNotChange(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n        increases(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n        doesNotIncrease(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n        decreases(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n        doesNotDecrease(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n\n        ifError(val: any, msg?: string): PromiseLike<void>;\n\n        isExtensible(obj: Object, msg?: string): PromiseLike<void>;\n        isNotExtensible(obj: Object, msg?: string): PromiseLike<void>;\n\n        isSealed(obj: Object, msg?: string): PromiseLike<void>;\n        sealed(obj: Object, msg?: string): PromiseLike<void>;\n        isNotSealed(obj: Object, msg?: string): PromiseLike<void>;\n        notSealed(obj: Object, msg?: string): PromiseLike<void>;\n\n        isFrozen(obj: Object, msg?: string): PromiseLike<void>;\n        frozen(obj: Object, msg?: string): PromiseLike<void>;\n        isNotFrozen(obj: Object, msg?: string): PromiseLike<void>;\n        notFrozen(obj: Object, msg?: string): PromiseLike<void>;\n\n        isEmpty(val: any, msg?: string): PromiseLike<void>;\n        isNotEmpty(val: any, msg?: string): PromiseLike<void>;\n    }\n}\n",
    "const expect = chai.expect",
    "interface Console {\nmemory: any;\nassert(condition?: boolean, message?: string, ...data: any[]): void;\nclear(): void;\ncount(label?: string): void;\ndebug(message?: any, ...optionalParams: any[]): void;\ndir(value?: any, ...optionalParams: any[]): void;\ndirxml(value: any): void;\nerror(message?: any, ...optionalParams: any[]): void;\nexception(message?: string, ...optionalParams: any[]): void;\ngroup(groupTitle?: string, ...optionalParams: any[]): void;\ngroupCollapsed(groupTitle?: string, ...optionalParams: any[]): void;\ngroupEnd(): void;\ninfo(message?: any, ...optionalParams: any[]): void;\nlog(message?: any, ...optionalParams: any[]): void;\nmarkTimeline(label?: string): void;\nprofile(reportName?: string): void;\nprofileEnd(reportName?: string): void;\ntable(...tabularData: any[]): void;\ntime(label?: string): void;\ntimeEnd(label?: string): void;\ntimeStamp(label?: string): void;\ntimeline(label?: string): void;\ntimelineEnd(label?: string): void;\ntrace(message?: any, ...optionalParams: any[]): void;\nwarn(message?: any, ...optionalParams: any[]): void;\n}\n\ndeclare var console: Console;"
]